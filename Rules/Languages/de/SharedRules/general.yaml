---

# number-sets are a little messy in that the base was converted to a number-set, so we have to match that (simple) case last
- name: pos-neg-number-sets
  tag: number-sets
  match: "count(*)=2 and *[2][.='+' or .='-']"
  replace:
  - test:
      if: "$Verbosity!='Terse'"
      then:
      - T: "die"      # phrase('the' square root of 25 equals 5)
  - bookmark: "*[2]/@id"
  - test:
    - if: "*[2][.='+']"
      then: [T: "positiven"]      # phrase(set of all 'positive' integers less than 10)
      else: [T: "negativen"]      # phrase(set of all 'negative' integers less than minus 10)
  - bookmark: "*[1]/@id"
  - test:
    - if: "*[1][.='ℂ']"
      then: [T: "komplexe zahlen"]      # phrase('complex numbers' consist of two parts)
    - else_if: "*[1][.='ℕ']"
      then: [T: "natürliche zahlen"]      # phrase('natural numbers' are numbers from 1 to infinity)
    - else_if: "*[1][.='ℚ']"
      then: [T: "rationale zahlen"]      # phrase('rational numbers' are the fraction of 2 integers)
    - else_if: "*[1][.='ℝ']"
      then: [T: "reelle zahlen"]      # phrase('real numbers' can be both positive and negative)
    - else_if: "*[1][.='ℤ']"
      then: [T: "ganze zahlen"]      # phrase(positive 'integers' are natural numbers above 0)
      else: [x: "*[1][text()]"] # shouldn't happen

- name: dimension-number-sets

  # should be single digit integer at this point (e.g, R^3)
  tag: number-sets
  match: "count(*)=2"
  replace:
  - bookmark: "*[1]/@id"
  - test:
    - if: "*[1][.='ℂ']"
      then: [T: "c"]      # phrase(the letter 'C' used to represent complex number)
    - else_if: "*[1][.='ℕ']"
      then: [T: "n"]      # phrase(the letter 'N' may represent natural numbers)
    - else_if: "*[1][.='ℚ']"
      then: [T: "q"]      # phrase(the letter 'Q' may represent rational numbers)
    - else_if: "*[1][.='ℝ']"
      then: [T: "r"]      # phrase(the letter 'R' may represent real numbers)
    - else_if: "*[1][.='ℤ']"
      then: [T: "z"]      # phrase(the letter 'Z' may represent integers)
      else: [x: "*[1][text()]"] # shouldn't happen
  - bookmark: "*[2]/@id"
  - x: "*[2]"

- name: simple-number-sets
  tag: number-sets
  match: "count(*)=0"
  replace:
  - bookmark: "@id"
  - test:
    - if: ".='ℂ'"
      then: [T: "die komplexen zahlen"]      # phrase('the complex numbers' include 2 parts)
    - else_if: ".='ℕ'"
      then: [T: "die natürlichen zahlen"]      # phrase('the natural numbers' begin at 1)
    - else_if: ".='ℚ'"
      then: [T: "die rationalen zahlen"]      # phrase('the rational numbers' are the fraction of 2 integers)
    - else_if: ".='ℝ'"
      then: [T: "die reellen zahlen"]      # phrase('the real numbers' can be both positive and negative)
    - else_if: ".='ℤ'"
      then: [T: "die ganzen zahlen"]      # phrase('the integers' are natural numbers above 0)
      else: [x: "text()"] # shouldn't happen

- name: real-part
  tag: real-part
  match: "."
  replace:
  - bookmark: "@id"
  - T: "realteil"      # phrase('the real part' of a complex number does not include the imaginary part)

- name: imaginary-part
  tag: imaginary-part
  match: "."
  replace:
  - bookmark: "@id"
  - T: "imaginärteil"      # phrase('the imaginary part' is part of a complex number)

# rules on scripted vertical bars ('evaluated at')
- name: evaluated-at-2
  tag: evaluate
  match: "count(*)=2"
  replace:
  - x: "*[1]"
  - pause: auto
  - T: "ausgewertet bei"      # phrase(results were 'evaluated at' a given point)
  - pause: auto
  - x: "*[2]"

- name: evaluated-at-3
  tag: evaluate
  match: "count(*)=3"
  replace:
  - x: "*[1]"
  - pause: auto
  - T: "ausgewertet zwischen"      # phrase(results were 'evaluated at' this point)
  - pause: auto
  - x: "*[3]"
  - T: "und"      # phrase(this result is 'minus the same expression evaluated at' an earlier point)
  - x: "*[2]"

- name: permutation
  # Not a default because the order of the args is reversed
  tag: pochhammer
  match: "count(*)=2 and contains(@data-intent-property, ':infix:')"
  replace:
  - x: "*[2]"
  - T: "permutationen von"      # phrase(the solution  involves several 'permutations of' values)
  - x: "*[1]"

- name: intervals
  tag: [open-interval, open-closed-interval, closed-interval, closed-open-interval]
  match: "count(*)=2"
  replace:
  - test:
      if: "$Verbosity!='Terse'"
      then:
      - T: "die"      # phrase('the' square root of 25 equals 5)
  - x: "translate(name(.),'-', ' ')"
  - test:
      if: "$Verbosity!='Terse'"
      then:
      - T: "von"      # phrase(subtracting 5 'from' 10 gives 5)
      - x: "*[1]"
      - T: "bis"      # phrase(adding 6 'to' 6 equals  12)
      - x: "*[2]"
      else:
      - x: "*[1]"
      - T: "komma"      # phrase(use a 'comma' to divide large numbers or as a decimal point)
      - x: "*[2]"

- name: default-point
  tag: point
  match: "count(*)=2"
  replace:
  - test:
      if: "$Verbosity!='Terse'"
      then:
      - T: "die"      # phrase('the' square root of 25 equals 5)
  - T: "punkt"      # phrase(a decimal 'point' indicates the fraction component of a number)
  - x: "*[1]"
  - T: "komma"      # phrase(use a 'comma' to divide large numbers or as a decimal point)
  - x: "*[2]"

- name: bigop-both
  tag: large-op
  match: "count(*) = 3"
  replace:
  - test:
      if: "$Verbosity!='Terse'"
      then: [T: "die"]      # phrase('the' square root of 25 equals 5)
  - x: "*[1]"
  - T: "von"      # phrase(subtracting 5 'from' 10 gives 5)
  - x: "*[2]"
  - T: "bis"      # phrase(adding 6 'to' 6 equals  12)
  - x: "*[3]"
  - test:
      if: "following-sibling::*"
      then: [T: "von"]      # phrase(the square root 'of' 25 equals 5)

- name: bigop-under
  tag: large-op
  match: "count(*)=2"
  replace:
  - test:
      if: "$Verbosity!='Terse'"
      then: [T: "die"]      # phrase('the' square root of 25 equals 5)
  - x: "*[1]"
  - T: "durch"      # phrase(2 'over' 3 equals two thirds)
  - x: "*[2]"
  - test:
      if: "following-sibling::*"
      then: [T: "von"]      # phrase(the square root 'of' 25 equals 5)

- name: largeop
  tag: mrow
  match: "count(*)=2 and IsInDefinition(*[1], 'LargeOperators')"
  replace:
  - test:
      if: "$Verbosity!='Terse'"
      then: [T: "die"]      # phrase('the' square root of 25 equals 5)
  - x: "*[1]"
  - T: "von"      # phrase(the square root 'of' 25 equals 5)
  - x: "*[2]"

- name: repeating-decimal
  tag: repeating-decimal
  match: "."
  replace:
  - x: "*[1]"
  - T: "mit wiederholten ziffern"      # phrase('with repeating digits')
  - spell: "*[2]"

- name: msubsup-skip-super
  # handles single, double, etc., prime
  tag: [skip-super, say-super]
  match: "count(*)=3"
  replace:
  - x: "*[1]"
  - test:
      if: "$Verbosity='Verbose'"
      then: [T: "index"]      # phrase(a 'subscript' may be used to indicate an index)
      else: [T: "sub"]      # phrase(the result is 'sub' optimal)
  - x: "*[2]"
  - test:
      if: "not(IsNode(*[2],'leaf') and $Impairment = 'Blindness')"
      then:
      - test:
          if: "$Verbosity='Verbose'"
          then: [T: "ende -index"]      # phrase(this is the 'end subscript' position)
          else: [T: "ende -sub"]      # phrase(this is the 'end sub' position)
      - pause: short
      else_test:
          if: "*[2][self::m:mi]"   # need a pause in "x sub k prime" so the prime is not associated with the 'k'
          then: [pause: short]
  - test:
      if: "name(.)='say-super'"
      then_test:
        if: "$Verbosity='Verbose'"
        then: [T: "superscript"]      # phrase(a 'superscript' number indicates raised to a power)
        else: [T: "super"]      # phrase(this is a 'super' set of numbers)
  - x: "*[3]"
  - pause: short


# the order of matching is
# 1. does it match the base of an SI unit
# 2. does it match an English unit (if in an English language)
# 3. does it match an SI prefix followed by an SI that accepts SI prefixes
# Due to this order, some things like "ft" and "cd" mean "feet" vs "femto-tonnes" and "pints" vs "pico-tonnes"
- name: unit
  tag: unit
  match: "$Verbosity != 'Terse' and contains(@data-intent-property, ':unit')"
  variables:
    # If the coefficient is singular, we don't add the plural ending. Finding the coefficient is tricky
    # Normal case (A) "3m" (parents is mrow), but could also be (B) "3 m^2" (etc.) (parent is power/mrow)
    # But it might be in a fraction as (C) "3 m/s" (parent is fraction/mrow) or (D) "3 m^2/s^2" (parent is power/fraction/mrow)
    #   or even (E) {3 m^2}/s (parent is power/mrow)
    # If in a fraction, only look in the numerator to find the coefficient
    # Note: we have a special case for pseudo-scripts like "°" (degrees) which are not powers -- they are essentially "1^°"
    # The following "IfThenElse" logic returns the mrow that potentially contains the coefficient, if it exists
    # The tests are in the order A, B & E, C, D
  - MRowForCoefficient: "IfThenElse(parent::m:mrow, parent::m:mrow,
                         IfThenElse(parent::m:power, ancestor::*[2][self::m:mrow],
                         IfThenElse(parent::m:fraction and not(preceding-sibling::*), ancestor::*[2][self::m:mrow],
                         IfThenElse(parent::m:power[parent::m:fraction and not(preceding-sibling::*)], ancestor::*[3][self::m:mrow], false()) ) ) )"
  - IsSingular: "(not(DEBUG($MRowForCoefficient)) and parent::*[name(.)!='skip-super' or *[1][.=1]]) or
                 ($MRowForCoefficient and $MRowForCoefficient[(count(*) = 3 and *[1][self::m:mn and .=1] and *[2]='\u2062')])"
  - Prefix: "''"
  - Word: "''"  
  replace:
  - bookmark: "@id"
  - test:
    # is the whole string match a SI Unit without a prefix?
    - if: "DefinitionValue(., 'Speech', 'SIUnits') != ''"
      then:
      - set_variables: [Word: "DefinitionValue(., 'Speech', 'SIUnits')"]
    - else_if: "DefinitionValue(., 'Speech', 'UnitsWithoutPrefixes') != ''"
      then:
      - set_variables: [Word: "DefinitionValue(., 'Speech', 'UnitsWithoutPrefixes')"]
    - else_if: "DefinitionValue(., 'Speech', 'EnglishUnits') != ''"
      then:
      - set_variables: [Word: "DefinitionValue(., 'Speech', 'EnglishUnits')"]

    # do the first two chars match "da" and the remainder match an SIUnit
    - else_if: "string-length(.) >= 3 and 
                substring(., 1, 2) = 'da' and
                DefinitionValue(substring(., 3), 'Speech', 'SIUnits') != ''"
      then:
      - set_variables:
        - Prefix: "DefinitionValue('da', 'Speech', 'SIPrefixes')"
        - Word: "DefinitionValue(substring(., 3), 'Speech', 'SIUnits')"

    # does the first char match a prefix and the remainder match an SIUnit
    - else_if: "string-length(.) >= 2 and 
                DefinitionValue(substring(., 1, 1), 'Speech', 'SIPrefixes') != ''  and
                DefinitionValue(substring(., 2), 'Speech', 'SIUnits') != ''"
      then:
      - set_variables:
        - Prefix: "DefinitionValue(substring(., 1, 1), 'Speech', 'SIPrefixes')"
        - Word: "DefinitionValue(substring(., 2), 'Speech', 'SIUnits')"

    # not a known unit -- just speak the text, possibly as a plural
    - else:
      - set_variables:
        - Word: "text()"

  # somewhat complicated logic to avoid spaces around "-" as in "centi-grams" vs "centi - grams" -- probably doesn't matter
  - test:
      if: "$Prefix = ''"
      then:
      - test:
        - if: "$IsSingular"
          # HACK: '\uF8FE' is used internally for the concatenation char by 'ct' -- this gets the prefix concatenated to the base
          then: [x: "$Word"]
        - else_if: "DefinitionValue($Word, 'Speech', 'PluralForms') != ''"
          then: [x: "DefinitionValue($Word, 'Speech', 'PluralForms')"]
          else: [x: "$Word", ct: "s"]
      else:
      - x: "$Prefix"
      - ct: "-"
      - test:
        - if: "$IsSingular"
          # HACK: '\uF8FE' is used internally for the concatenation char by 'ct' -- this gets the prefix concatenated to the base
          then: [x: "concat('\uF8FE', $Word)"]
        - else_if: "DefinitionValue($Word, 'Speech', 'PluralForms') != ''"
          then: [x: "concat('\uF8FE', DefinitionValue($Word, 'Speech', 'PluralForms'))"]
          else: [x: "concat('\uF8FE', $Word)", ct: "s"]

    
- name: sin
  tag: mi
  match: ".='sin'"
  replace:
  - bookmark: "@id"
  - T: "sinus"      # phrase(the 'sine' of the angle)
- name: cos
  tag: mi
  match: ".='cos'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "cos"]      # phrase('cos' is the abbreviation for cosine)
      else: [T: "kosinus"]      # phrase(find the 'cosine' in a right-angle triangle)
- name: tan
  tag: mi
  match: ".='tan' or .='tg'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "tan"]      # phrase(the 'tan' is the ratio of the opposite to the adjacent side of a right-angled triangle)
      else: [T: "tangens"]      # phrase(a 'tangent' is a straight line that touches a curve)
- name: sec
  tag: mi
  match: ".='sec'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "sekans"]      # phrase(to 'seek' a solution)
      else: [T: "sekans"]      # phrase(a 'secant' intersects a curve at two or more points)
- name: csc
  tag: mi
  match: ".='csc'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "kosekans"]      # phrase(we will 'cosecant' a solution)
      else: [T: "kosekans"]      # phrase(the 'cosecant' is the reciprocal of the secant)
- name: cot
  tag: mi
  match: ".='cot'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "kotangens"]      # phrase(find the 'cotangent' in a right-angle triangle)
      else: [T: "kotangens"]      # phrase(the 'cotangent' is the reciprocal of the tangent)

- name: sinh
  tag: mi
  match: ".='sinh'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "sinch"]      # phrase(the word 'sinch' is an abbreviation for hyperbolic sine)
      else: [T: "hyperbolischer sinus"]      # phrase(the 'hyperbolic sine' is used in mathematics)
- name: cosh
  tag: mi
  match: ".='cosh'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "cosh"]      # phrase('cosh' is an abbreviation of hyperbolic cosine)
      else: [T: "hyperbolischer cosinus"]      # phrase(the 'hyperbolic cosine' is a mathematical function)
- name: tanh
  tag: mi
  match: ".='tanh'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "tanch"]      # phrase('tanch' is shorthand for hyperbolic tangent)
      else: [T: "hyperbolischer tangens"]      # phrase('hyperbolic tangent' is a mathematical function)
- name: sech
  tag: mi
  match: ".='sech'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "sheck"]      # phrase('sheck' is shorthand for hyperbolic secant)
      else: [T: "hyperbolischer sekans"]      # phrase('hyperbolic secant' is a mathematical function)
- name: csch
  tag: mi
  match: ".='csch'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "cosheck"]      # phrase('cosheck' is shorthand for hyperbolic cosecant)
      else: [T: "hyperbolischer kosekans"]      # phrase('hyperbolic cosecant' is a mathematical function)
- name: coth
  tag: mi
  match: ".='coth'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "cotanch"]      # phrase('cotanch' is shorthand for hyperbolic cotangent)
      else: [T: "hyperbolischer kotangens"]      # phrase(the 'hyperbolic cotangent' is a mathematical function)
- name: exponential
  tag: mi
  match: ".='exp'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "exp"]      # phrase('exp' means exponential function)
      else: [T: "exponent"]      # phrase('exponential' function)
- name: covariance
  tag: mi
  match: ".='Cov'"
  replace:
  - bookmark: "@id"
  - test:
      if: "$Verbosity='Terse'"
      then: [T: "cov"]      # phrase('Cov' is shorthand for the covariance function)
      else: [T: "kovarianz"]      # phrase('covariance' function)

-
  name: log    # handle both log and ln (if in an mrow, 'intents' are used)
  tag: mi
  match: ".='log' or .='ln'"
  replace:
  - bookmark: "@id"
  - test:
    - if: "$Verbosity!='Terse'"
      then: [T: "der"]      # phrase('the' logarithm function is used in mathematics)

  - test:
    - if: ".= 'log'"
      then: [T: "log"]      # phrase(the 'log' function is used in mathematics)
    - else_if: "$Verbosity='Terse'"
      then: [spell: "'ln'"]
      else: [T: "natürliche logarithmus"]      # phrase(the 'natural log' function is used in mathematics)


- name: multi-line
  #   that eliminates the need for the if: else_if: ...
  # IDEA:  set a variable with the word to say for the row (e.g., RowLabel = Row/Case/Line/...)
  tag: [piecewise, system-of-equations, lines]
  match: "."
  variables:
    # Wikipedia has some tables where all the entire first column is empty (e.g., https://en.wikipedia.org/wiki/List_of_trigonometric_identities)
  - LineCount: "count(*[not(contains(@data-intent-property, ':continued-row:'))])"
  - NextLineIsContinuedRow: "false()"   # default value
  - IsColumnSilent: true()
  replace:
  - x: "$LineCount"
  - test:
    - if: "self::m:piecewise"
      then: [T: "fall"]      # phrase(this is the first 'case' of three cases)
    - else_if: "self::m:system-of-equations"
      then: [T: "gleichung"]      # phrase(this is the first 'equation' of three equations)
      else: [T: "zeile"]      # phrase(this is the first 'line' of three lines)
  - test:
    - if: "$LineCount != 1"
      then: [ct: "s"] # plural
  - pause: short
  - x: "*"
  - pause: long


- name: default-multiline
  tag: [mtr, mlabeledtr]
  match: "parent::m:piecewise or parent::m:system-of-equations or parent::m:lines"
  variables: [NextLineIsContinuedRow: "following-sibling::*[1][contains(@data-intent-property, ':continued-row:')]"]
  replace:
  - test:
      if: "not($LineCount=1 or contains(@data-intent-property, ':continued-row:'))"
      then:
      - pause: medium
      - test:
        - if: "parent::m:piecewise"
          then: [T: "fall"]     # phrase('case' 1 of 10 cases)
        - else_if: "parent::m:system-of-equations"
          then: [T: "gleichung"] # phrase('equation' 1 of 10 equations)
          else: [T: "zeile"]     # phrase('line 1 of 10 lines)
      - x: "count(preceding-sibling::*[not(contains(@data-intent-property, ':continued-row:'))]) + 1"
  - test:
      if: "self::m:mlabeledtr"
      then:
      - T: "mit der bezeichnung"      # phrase(the diagram is complete 'with label')
      - x: "*[1]/*"
  - test:
      if: "not(contains(@data-intent-property, ':continued-row:'))"
      then: [pause: medium]
  - test:
      if: "self::m:mlabeledtr"
      then: [x: "*[position()>1]"]
      else: [x: "*"]

- name: default-multiline
  tag: mtd
  match: "parent::*[parent::m:piecewise or parent::m:system-of-equations or parent::m:lines]"
  variables: [LongPause: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_MultiLinePausesBetweenColumns = 'Long'"]
  replace:
  - test:
      if: "IsInDefinition(*[1], 'ComparisonOperators')"
      then: [pause: short]
  - test:
      if: "*[1][@data-added!='missing-content']"
      then: [x: "*"]
  - test:
    # no pause after each element; medium pause if last element in a row; long pause for last element in matrix unless ClearSpeak override
    - if: "count(following-sibling::*) = 0 and not($NextLineIsContinuedRow)"
      then_test:
          if: "count(../following-sibling::*) > 0"
          then_test:
              if: "$LongPause"
              then: [pause: long]
              else: [pause: medium]
      else_test:
          if: "IsInDefinition(*[1], 'ComparisonOperators')"
          then: [pause: short]
          else: [pause: auto]

# Matrix/Determinant rules
# matrix and determinant are the same other than "matrix"/"determinant" based on the bracketing chars
# the pausing logic is pushed down to the <mtd>
# the rules either speak the <mtr>s (to get "row n") or the <mtd>s. "column n" spoken if $IsColumnSilent is false
- name: 1x1-matrix
  tag: [matrix, determinant]
  variables: [IsColumnSilent: true()]
  match: "count(*)=1 and *[self::m:mtr][count(*) = 1]"
  replace:
  - ot: "die"      # phrase('the' 1 by 1 matrix M)
  - T: "1 mal 1"      # phrase(the '1 by 1' matrix)
  - test:
      if: "self::m:determinant" # just need to check the first bracket since we know it must be (, [, or |
      then: [T: "determinante"]      # phrase(the 2 by 2 'determinant'))
      else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
      
  - T: "mit eintrag"      # phrase(the 2 by 2 matrix 'with entry' x)
  - x: "*[1]/*"

# simpler reading methods for special case matrices
- name: zero-matrix
  tag: matrix
  # select all the non-zero entries -- if there are none of them, then it is a zero matrix
  match: "not( */*/*[not(self::m:mn and .= 0)] )"
  replace:
  - T: "die"      # phrase('the' 1 by 2 matrix M)
  - x: count(*)
  - T: "mal"       # phrase(the 1 'by' 2 matrix)
  - x: count(*[self::m:mtr][1]/*)
  - T: "nullmatrix"   # phrase(the 2 by 2 'zero matrix')
  - pause: long

- name: identity-matrix
  tag: matrix
  # select all the non-zero entries...if they are not on the diagonal, or are != 1
  #   if there are any of them, then this isn't an identity matrix
  match:
  - "count(*) = count(*[1]/*) and "
  - "not( */*/*[not(self::m:mn and .= 0)]"
  - "          [count(../preceding-sibling::*)!=count(../../preceding-sibling::*) or .!= 1]"
  - "    )"
  replace:
  - T: "die"      # phrase('the' 1 by 2 matrix M)
  - x: count(*)
  - T: "mal"       # phrase(the 1 'by' 2 matrix)
  - x: count(*[self::m:mtr][1]/*)
  - T: "identitätsmatrix"   # phrase(the 2 by 2 'identity matrix')
  - pause: long

- name: diagonal-matrix
  tag: matrix
  # select all the non-zero entries...if they are not on the diagonal
  #   if there are any of them, then this isn't an identity matrix
  match:
  - "count(*) = count(*[1]/*) and "
  - "not( */*/*[not(self::m:mn and .= 0)]"
  - "          [count(../preceding-sibling::*)!=count(../../preceding-sibling::*)]"
  - "    )"
  replace:
  - T: "die"      # phrase('the' 1 by 2 matrix)
  - x: count(*)
  - T: "mal"       # phrase(the 1 'by' 2 matrix)
  - x: count(*[self::m:mtr][1]/*)
  - T: "diagonalmatrix"   # phrase(the 2 by 2 'diagonal matrix')
  - pause: long
  - insert:
      # this lists the diagonal 'mtd's to be read, and they say "column nnn" before reading the contents
      # there seems to be an xpath bug -- without the parens, the match fails for the
      #   test Languages::en::mtable::diagonal_matrix due to match failure (the third matching element seems to be missing)
      nodes: "(*/*/*[not(self::m:mn and .= 0)]/..)"
      replace: [pause: auto]
  - pause: long

# simpler reading methods for smaller matrices if the entries are simple
- name: 2-or-3x1-matrix
  tag: matrix
  variables: [IsColumnSilent: true()]
  match:
  - "$ClearSpeak_Matrix != 'SpeakColNum' and " # "simple" isn't used for this preference
  - "*[self::m:mtr][count(*) = 1] and " # one column
  - count(*)<=3 and # at least two rows
  - IsNode(*/*/*,'simple') # IsNode() returns true if all the nodes are simple
  replace:
  - T: "die"      # phrase('the' 2 by 2 matrix M)
  - x: count(*)
  - T: "mal 1 spalte"      # phrase(the 2 'by 1 column' matrix)
  - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: [T: "vektor"]      # phrase(the 2 by 2 'vector')
      else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
  - pause: long
  - x: "*/*"
  - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - T: "ende"      # phrase('end' of matrix)
      - test:
          if: $ClearSpeak_Matrix = 'EndVector'
          then: [T: "vektor"]      # phrase(the 2 column 'vector')
          else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')

- name: default-column-matrix
  tag: matrix
  variables: [IsColumnSilent: true()]
  match: "*[self::m:mtr][count(*) = 1]"
  replace:
  - T: "die"      # phrase('the' 2 by 2 matrix M)
  - x: "count(*)"
  - T: "mal 1 spalte"      # phrase(the 2 'by 1 column' matrix)
  - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: [T: "vektor"]      # phrase(the 2 column 'vector')
      else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
  - pause: long
  - x: "*" # select the rows (mtr)
  - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then: [T: "ende der matrix"]      # phrase(the 'end of matrix' has been reached)

- name: 1x2-or-3-matrix
  tag: matrix
  variables: [IsColumnSilent: "$SpeechStyle = 'SimpleSpeak' or ($SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix != 'SpeakColNum')"]
  match:
  - "$ClearSpeak_Matrix != 'SpeakColNum' and " # "simple" isn't used for this preference
  - count(*)=1  and # one row
  - count(*[1]/*)<=3 and # at least two cols
  - IsNode(*/*/*,'simple') # IsNode() returns true if all the nodes are simple
  replace:
  - T: "die 1 mal"      # phrase('the 1 by' 2 matrix)
  - x: count(*/*)
  - T: "Zeile"      # phrase(the 1 by 4 'row' matrix)
  - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: [T: "die 1 mal"]      # phrase('the 1 by' 2 row 'vector')
      else: [T: "die 1 mal"]      # phrase('the 1 by' 2 'matrix')
  - pause: long
  - x: "*/*"
  - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - T: "ende"      # phrase(the 'end' of matrix has been reached)
      - test:
          if: $ClearSpeak_Matrix = 'EndMatrix'
          then: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
          else: [T: "vektor"]      # phrase(the 2 by 1 'vector')

- name: default-row-matrix
  tag: matrix
  variables: [IsColumnSilent: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix = 'SilentColNum'"]
  match: "count(*)=1" # one row
  replace:
  - T: "die 1 mal"      # phrase('the 1 by' 2 matrix)
  - x: "count(*/*)"
  - T: "zeile"      # phrase(the 1 by 2 'row' matrix)
  - test:
      if: "$ClearSpeak_Matrix = 'Vector' or $ClearSpeak_Matrix = 'EndVector'"
      then: [T: "vektor"]      # phrase(the 2 by 1 'vector')
      else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
  - pause: long
  - pause: medium
  - x: "*/*" # select the cols (mtd)
  - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - T: "ende"      # phrase(the 'end' of matrix has been reached)
      - test:
          if: $ClearSpeak_Matrix = 'EndMatrix'
          then: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
          else: [T: "vektor"]      # phrase(the 2 by 1 'vector')

- name: simple-small-matrix
  tag: [matrix, determinant]
  match:
  - "$ClearSpeak_Matrix != 'SpeakColNum' and " # "simple" isn't used for this preference
  - (count(*)<=3 and count(*[1]/*)<=3) and # no bigger than a 3x3 matrix
  - IsNode(*/*/*,'simple') # IsNode() returns true if all the nodes are simple
  variables: [IsColumnSilent: "$SpeechStyle = 'SimpleSpeak' or ($SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix != 'SpeakColNum')"]
  replace:
  - T: "die"      # phrase('the' 1 by 2 matrix M)
  - x: count(*)
  - T: "mal"      # phrase(the 1 'by' 2 matrix)
  - x: count(*[self::m:mtr][1]/*)
  - test:
      if: "self::m:determinant"
      then: [T: "determinante"]      # phrase(the 2 by 2 'determinant')
      else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
  - pause: long
  - x: "*"
  - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - T: "ende"      # phrase(the 'end' of matrix has been reached)
      - test:
          if: "self::m:determinant"
          then: [T: "determinante"]      # phrase(the 2 by 2 'determinant')
          else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')

- name: default-matrix
  tag: [matrix, determinant]
  variables: [IsColumnSilent: "$SpeechStyle = 'ClearSpeak' and $ClearSpeak_Matrix = 'SilentColNum'"]
  match: "."
  replace:
  - T: "die"      # phrase('the' 1 by 2 matrix M)
  - x: "count(*)"
  - T: "mal"      # phrase(the 1 'by' 2 matrix)
  - x: "count(*[self::m:mtr][1]/*)"
  - test:
      if: "self::m:determinant"
      then: [T: "determinante"]      # phrase(the 2 by 2 'determinant')
      else: [T: "matrix"]      # phrase(the 2 by 2 'matrix')
  - pause: long
  - x: "*"
  - test:
      if: "$ClearSpeak_Matrix = 'EndMatrix' or $ClearSpeak_Matrix = 'EndVector'"
      then:
      - T: "ende"      # phrase(the 'end' of matrix has been reached)
      - test:
          if: "self::m:determinant"
          then: [T: "determinante"]      # phrase(the 2 by 2 'determinant')
          else: [T: "matrix"]      # phrase(the 2 by 2 'matrix's)

- name: chemistry-msub
  tag: [chemical-formula]
  match: "*[1][.='msub']"
  replace:
  - x: "*[2]"
  - test:
      if: "$Verbosity='Verbose'"
      then: [T: "index"]      # phrase(H 'subscript' 2)
      else_test:
        if: "$Verbosity='Medium'"
        then: [T: "sub"]      # phrase(H 'sub' 2)
  - x: "*[3]"

- name: dimension-by
  tag: mrow
  match: dimension-product
  replace:
  - insert:
      nodes: "*"
      replace: [T: "mal", pause: auto]      # phrase(3 'by' 5 matrix)

- name: chemistry-msup
  tag: [chemical-formula]
  match: "count(*)=3 and *[1][.='msup']"
  replace:
  - x: "*[2]"
  - test:
      if: "$Verbosity='Verbose'"
      then: [T: "superscript"]      # phrase(H 'superscript' 2)
      else_test:
        if: "$Verbosity='Medium'"
        then: [T: "super"]      # phrase(H 'super' 2)
  - x: "*[3]"
  - test:
      if: "following-sibling::*[1][.='+' or .='-']" # a little lazy -- assumes chemistry superscripts end with + or -
      then: [pause: medium]

-
  # There currently is no way to do sub/super for n-ary number of args
  # Instead, we just deal with up to two prescripts and up to four postscripts (repeating blocks of similar code [UGLY!])
  # This hopefully covers all reasonable cases...
  name: chemistry-scripts
  tag: [chemical-formula, chemical-nuclide]
  variables:
  # computing the number of postscripts is messy because of <mprescripts> being optionally present -- we use "mod" to get the count right
  - Prescripts: "m:mprescripts/following-sibling::*"
  - NumChildren: "count(*)" # need to stash this since the count is wrong inside '*[...]' below
  - Postscripts: "*[position()>1 and position() < (last() + ($NumChildren mod 2) -count($Prescripts))]"
  match: . # should only be msubsup or mmultiscripts at this point
  replace:
  - test:
      if: "$Prescripts" # we have at least one pre sub/super 
      then:
      # nuclide: speak the superscript first
      - test:
          if: "not($Prescripts[2][self::m:none])"
          then:
          - test:
              if: "$Verbosity='Verbose'"
              then: [T: "superscript"]      # phrase(H 'superscript' 2)
              else_test:
                if: "$Verbosity='Medium'"
                then: [T: "super"]      # phrase(H 'super' 2)
          - x: "$Prescripts[2]"
          - pause: "short"
      - test:
          if: "not($Prescripts[1][self::m:none])"
          then:
          - test:
              if: "$Verbosity='Verbose'"
              then: [T: "index"]      # phrase(a 'subscript' may be used to indicate an index)
              else_test:
                if: "$Verbosity='Medium'"
                then: [T: "sub"]      # phrase(here is a 'sub' total)
          - x: "$Prescripts[1]"
          - pause: "short"
      - test:
          if: "count($Prescripts) > 2" # can this happen for chemistry??? we allow for one *extra* pre sub/super pair
          then:
          - test:
              if: "not($Prescripts[4][self::m:none])"
              then:
              - test:
                  if: "$Verbosity='Verbose'"
                  then: [T: "superscript"]      # phrase(H 'superscript' 2)
                  else_test:
                    if: "$Verbosity='Medium'"
                    then: [T: "super"]      # phrase(H 'super' 2)
              - x: "$Prescripts[4]"
              - pause: "short"
          - test:
              if: "not($Prescripts[3][self::m:none])"
              then:
              - test:
                  if: "$Verbosity='Verbose'"
                  then: [T: "index"]      # phrase(H 'subscript' 2)
                  else_test:
                    if: "$Verbosity='Medium'"
                    then: [T: "sub"]      # phrase(H 'sub' 2)
              - x: "$Prescripts[3]"
              - pause: "short"
  - x: "*[1]" # base
  - test:
      if: "$Postscripts"
      then:
      - test:
          if: "not($Postscripts[1][self::m:none])"
          then:
          - test:
              if: "$Verbosity='Verbose'"
              then: [T: "index"]      # phrase(phrase(H 'subscript' 2)
              else_test:
                if: "$Verbosity='Medium'"
                then: [T: "sub"]      # phrase(phrase(H 'sub' 2)
          - x: "$Postscripts[1]"
          - pause: "short"
      - test:
          if: "not($Postscripts[2][self::m:none])"
          then:
          - test:
              if: "$Verbosity='Verbose'"
              then: [T: "superscript"]      # phrase(H 'superscript' 2)
              else_test:
                if: "$Verbosity='Medium'"
                then: [T: "super"]          # phrase(H 'super' 2)
          - x: "$Postscripts[2]"
          - pause: "short"
      - test:
          if: "count($Postscripts) > 2"
          then:
          - test:
              if: "not($Postscripts[3][self::m:none])"
              then:
              - test:
                  if: "$Verbosity='Verbose'"
                  then: [T: "index"]      # phrase(H 'subscript' 2)
                  else_test:
                    if: "$Verbosity='Medium'"
                    then: [T: "sub"]          # phrase(H 'sub' 2)
              - x: "$Postscripts[3]"
              - pause: "short"
          - test:
              if: "not($Postscripts[4][self::m:none])"
              then:
              - test:
                  if: "$Verbosity='Verbose'"
                  then: [T: "superscript"]      # phrase(H 'superscript' 2)
                  else_test:
                    if: "$Verbosity='Medium'"
                    then: [T: "super"]          # phrase(H 'super' 2)
              - x: "$Postscripts[4]"
              - pause: "short"
          - test:
              if: "count($Postscripts) > 4"
              then:
              - test:
                  if: "not($Postscripts[5][self::m:none])"
                  then:
                  - test:
                      if: "$Verbosity='Verbose'"
                      then: [T: "index"]    # phrase(H 'subscript' 2)
                      else_test:
                        if: "$Verbosity='Medium'"
                        then: [T: "sub"]        # phrase(H 'sub' 2)
                  - x: "$Postscripts[5]"
                  - pause: "short"
              - test:
                  if: "not($Postscripts[6][self::m:none])"
                  then:
                  - test:
                      if: "$Verbosity='Verbose'"
                      then: [T: "superscript"]  # phrase(H 'superscript' 2)
                      else_test:
                        if: "$Verbosity='Medium'"
                        then: [T: "super"]      # phrase(H 'super' 2)
                  - x: "$Postscripts[6]"
                  - pause: "short"
              - test:
                  if: "count($Postscripts) > 6"
                  then:
                  - test:
                      if: "not($Postscripts[7][self::m:none])"
                      then:
                      - test:
                          if: "$Verbosity='Verbose'"
                          then: [T: "index"]      # phrase(H 'subscript' 2)
                          else_test:
                            if: "$Verbosity='Medium'"
                            then: [T: "sub"]      # phrase(H 'sub' 2)
                      - x: "$Postscripts[7]"
                      - pause: "short"
                  - test:
                      if: "not($Postscripts[8][self::m:none])"
                      then:
                      - test:
                          if: "$Verbosity='Verbose'"
                          then: [T: "superscript"]      # phrase(H 'superscript' 2)
                          else_test:
                            if: "$Verbosity='Medium'"
                            then: [T: "super"]      # phrase(H 'super' 2)
                      - x: "$Postscripts[8]"
                      - pause: "short"
      - test:
          if: "$Postscripts[last()][not(self::m:none)] and following-sibling::*[1][.='+' or .='-']"
          then: [pause: medium]

- name: chemistry
  tag: chemical-equation
  match: "."
  replace:
  - x: "*"

- name: chemical-element
  tag: chemical-element
  match: "."
  replace:
  - bookmark: "@id"
  - spell: text()
  - pause: short

- name: chemical-state
  tag: chemical-state
  match: "count(*)=1"
  replace:
  - bookmark: "*[1]/@id"
  - test:
    - if: ".='s'"
      then: [T: "solide"]      # phrase(Boron is a 'solid' in its natural state)
    - else_if: ".='l'"
      then: [T: "flüssigkeit"]      # phrase(water is a 'liquid')
    - else_if: ".='g'"
      then: [T: "gas"]      # phrase(hydrogen is a 'gas' )
      else: [T: "wässrige"]      # phrase(an 'aqueous' solution is contained in water)
  - pause: short

- name: chemical-formula-operator-bond
  tag: chemical-formula-operator
  match: "@data-chemical-bond"
  replace:
  # FIX: this might be better/more efficient if in unicode.yaml
  - bookmark: "@id"
  - test:
    - if: ".='-' or .=':'"
      then: [T: "einzelbindung"]      # phrase(a 'single bond' is formed when two atoms share one pair of electrons)
    - else_if: ".='=' or .='∷'"
      then: [T: "doppelbindung"]      # phrase(a 'double bond' may occur when two atoms share two pairs of electrons)
    - else_if: ".='≡'"
      then: [T: "dreifachbindung"]      # phrase(a 'triple bond' occurs when two atoms share three pairs of electrons)
    - else_if: ".='≣'"
      then: [T: "vierfachbindung"]      # phrase(a 'quadruple bond' occurs when two atoms share four pairs of electrons)
      else: [x: "text()"]

- name: chemical-formula-operator
  tag: chemical-formula-operator
  match: "."
  replace:
    x: "text()"

- name: chemical-arrow-operator
  tag: chemical-arrow-operator
  match: "."
  replace:
  # FIX: this might be better/more efficient if in unicode.yaml
  - bookmark: "@id"
  - test:
    - if: ".='→' or .='⟶'"
      then_test:
        if: "$Verbosity='Terse'"
        then: [T: "formen"]      # phrase(hydrogen and oxygen 'forms' water )
        else: [T: "reagiert auf die form"]      # phrase(hydrogen and oxygen 'reacts to form' water)
    - else_if: ".='⇌' or .='\u1f8d2'"
      then: [T: "ist im gleichgewicht mit"]      # phrase(a reactant 'is in equilibrium with' a product)
    - else_if: ".='\u1f8d4'"
      then: [T: "ist im gleichgewicht nach links vorgespannt mit"]      # phrase(the reactant 'is in equilibrium biased to the left with' the product)
    - else_if: ".='\u1f8d3'"
      then: [T: "ist im gleichgewicht nach rechts vorgespannt mit"]      # phrase(the reactant 'is in equilibrium biased to the right with' the product)
      else: [x: "*"]

- name: chemical-equation-operator
  tag: chemical-equation-operator
  match: "."
  replace:
  - bookmark: "@id"
  - x: "text()"

- name: none
  tag: none
  match: "../../*[self::m:chemical-formula or self::m:chemical-nuclide]"
  replace:
  - T: "" # don't say anything

- name: ignore-intent-wrapper
  tag: intent-wrapper
  match: "."
  replace:
  - x: "*"
