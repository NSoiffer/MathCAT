# References such as 7.2(5) refer to the fifth example in section 7.2 in guide from ONCE
# https://www.once.es/servicios-sociales/braille/comision-braille-espanola/documentos-tecnicos/documentos-tecnicos-relacionados-con-el-braille/documentos/b5-signografia-matematica.pdf
---
# -
#   name: unit-spaces
#   tag: "!*"
#   match: "not(self::m:math) and not($MatchingWhitespace) and (@data-previous-space-width >= 0.25 or @data-following-space-width >= 0.25)"
#   replace:
#    - with:
#       variables: [MatchingWhitespace: "true()"]
#       replace:
#       - test:
#         - if: "(@class='MathML-unit' or contains(@intent, ':unit') or BaseNode(.)[@class='MathML-unit' or contains(@intent, ':unit')]) and @data-previous-space-width >= 0.25" 
#           then: [t: "ùêñ"]
#       - x: "."
#       - test:
#         - if: "(@class='MathML-unit' or contains(@intent, ':unit') or BaseNode(.)[@class='MathML-unit' or contains(@intent, ':unit')]) and @data-following-space-width >= 0.25" 
#           then: [t: "ùêñ"]

-
  name: omissions
  tag: "!*"
  match: "contains(@intent, ':blank')"
  replace:
  - test:
      - if: "self::m:mo"
        then: [t: "‚†∞"]      # 14.5(1)
      - else_if: "contains(., '\u00A0')"
        then:   # treated as a number omission -- FIX: anything to look at to increase the odds of it being digits
        - t: "N"
        - x: "translate(., '_\u00A0', '‚†∞')"  # note space is removed
        else: [t: "‚†∞‚†§‚†Ü"]
  - t: ""


-
  name: default
  tag: msqrt
  match: "."
  replace: 
  - t: "‚†©"
  - x: "*"

-
  name: default
  tag: mroot
  match: "."
  replace: 
  - t: "‚†å"
  - test:
      if: "*[2][self::m:mn][not(contains(., '.,'))]"
      then: [x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"]

      else: [x: "*[2]"]
  - t: "‚†©"
  - x: "*[1]"
        
-
  name: repeating decimal (2.3 uses a "^" over the repeating decimals)
  tag: mrow
  match:
    - "count(*)=3 and *[1][self::m:mn] and *[2][self::m:mo and .='\u2062'] and"
    - "*[3][self::m:mover and *[1][self::m:mn] and *[2][self::m:mo and .='^']]" 
  replace: 
  - x: "*[1]"
  - t: "‚†Ç"
  - test:
      if: "string-length(*[3]/*[1]) <= 2"
      then:             # the examples don't group the digits when there are only one or two digits
      - t: "ùëÅ"
      - x: "*[3]/*[1]" 
      else:
      - t: "‚†¢ùëÅ"
      - x: "*[3]/*[1]"
      - t: "‚†î"

# Fraction rules
  # The fraction part of a mixed number is always simple
  # They also differ because a two character sequence is needed to bracket the fraction
  # The invisible plus should produce an empty string

-
  # nice easy rule, but very long winded and tests show short form rules which follow
  name: long-form
  tag: mfrac
  match:
    - "not($Polish_UseShortForm)"
  replace: 
  - t: "‚†Ü"
  - x: "*[1]"
  - t: "W‚†≥W"
  - x: "*[2]"
  - t: "‚†∞"

-
  name: common-fraction-mixed-number
  tag: mfrac
  match:
    - "preceding-sibling::*[1][self::m:mo][.='\u2064'] and" # preceding element is invisible plus
    - "*[1][self::m:mn][not(contains(., '.,'))]   and" 
    - "*[2][self::m:mn][not(contains(., '.,'))]"
  replace: 
  - t: "#"   # need to force a number sign between the numbers
  - x: "*[1]"
  - x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"   # drop numbers for the numerator

-
  name: simple-number
  tag: mfrac
  match: "*[1][self::m:mn][not(contains(., '.,'))] and *[2][self::m:mn][not(contains(., '.,'))]"
  replace:
  - x: "*[1]"
  - x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"   # drop numbers for the numerator
  - t: "W"

-
  name: simple-fraction
  tag: mfrac
  match: "$Polish_UseShortForm and *[1][string-length(.)=1] and *[2][string-length(.)=1]"
  replace:
  - x: "*[1]"
  - t: "‚†≥"  # don't need number indicator
  - test:
      if: "*[2][self::m:mn][not(contains(., '.,'))]"
      then:
      - x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"   # drop numbers for the numerator
      else:
      - x: "*[2]"

-
  name: default
  tag: mfrac
  match: "."
  replace:
  - with:
      variables: [Numerator: "BrailleChars(*[1], Polish)"]
      replace: [x: "DEBUG($Numerator)"]

  - t: "‚†Ü"
  - test:
      if: "$Polish_UseShortForm and *[2][self::m:mn][not(contains(., '.,'))]"
      then:
      - t: "‚†≥"
      - x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"   # drop numbers for the numerator
      else:
      - t: "W‚†≥"
      - x: "*[2]"
      - t: "‚†∞"

#
# Matrix/Determinant rules
# matrix and determinant are the same other than "matrix"/"determinant" based on the bracketing chars
# we don't do spatial layout, instead the beginning/ending of each row uses the enlarged bracketing chars
-
  name: default-matrix
  tag: mrow
  variables:
    - RowStart: "*[1]"
    - RowEnd: "*[3]"
  match:
    - "*[2][self::m:mtable] and"
    - (IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '|', '|'))
  replace: [x: "*[2]"]

-
   name: default-mtable
   tag: mtable
   match: "."
   replace: [x: "*"]

-
  name: default
  tag: [mtr, mlabeledtr]
  match: "."
  replace:
   - test: 
      if: "count(parent::*) > 1"
      then: [t: "‚††"]
   - t: ""
   - x: $RowStart
   - test:
      if: .[self::m:mlabeledtr]
      then:
         - t: "‚†ó‚†ï‚†∫W‚†á‚†Å‚†É‚†ë‚†á‚†∏‚†í"  # "row label:"
         - x: "*[1]/*"           # contents of row label
   - test:
      if: .[self::m:mlabeledtr]
      then: [x: "*[position()>1]"]
      else: {x: "*"}
   - test: 
      if: "count(parent::*) > 1"
      then: [t: "‚††"]
   - x: $RowEnd

-
  name: default
  tag: mtd
  match: "."
  replace:
  - test:
      if: "*"
      then:
      - test: 
         if: "preceding-sibling::*"
         then: [t: "W"]
      - x: "*"
      # else nothing to braille

-
  name: no-content
  tag: math
  match: "not(*)"      # empty
  replace: [t: "W"]    # not sure that is right, but this shouldn't happen

-
  name: default
  tag: math
  match: "."
  variables:
    - RowStart: "''"           # empty string -- it needs to be set
    - RowEnd: "''"             # empty string -- it needs to be set
    - NewScriptContext: "''"    # empty string -- it needs to be set
    - MatchingWhitespace: "false()"
  replace: [x: "*"]

-
  name: empty-mrow
  tag: mrow
  match: "not(*)"
  replace: [t: "W"] # not sure what is correct -- if in a fraction, probably something is better than nothing

# -
  # 1.3 says that if the character after a closing(?) bar has any of dots 1, 2, or 3, then a blank must be added.
  # The rule should exam the translation of right sibling, but there is no way to do that.
  # The ugly hack is to define a variable lists all the chars with dots in any of position 1, 2, or 3.
  # This is obviously error prone as the list needs to be potentially updated when new chars are added.
  #
  # FIX: I tested the IsInDefinition call for cases when the right child is a structure.
  # It grabs the text of the leftmost child, but this is wrong if some braille indicators come first,
  #   such as a sqrt or implicit grouping. All of these cases have dots in positions 1, 2, or 3.
  #   We do a one level down test for these cases, but it is only a band-aid
  # name: space-after-bar
  # tag: mrow
  # variables: [NextRealChild: "IfThenElse(following-sibling::*[1][.='\u2062'], following-sibling::*[2], following-sibling::*[1])"]
  # match:
  # - "IsBracketed(., '|', '|') and $NextRealChild and"
  # - "( $NextRealChild[self::m:msqrt] or $NextRealChild[self::m:mroot] or"    # have indicator with dots in first half
  # - "  (IsNode($NextRealChild, '2D') and $NextRealChild[*[1][self::m:mrow and not(IsBracketed(., '', ''))]]) or"  # grouping char added which has dots in first half 
  # - "  IsInDefinition(substring($NextRealChild, 1, 1), 'Braille', 'CMUCharsWithDotsOnLeft')"
  # - ")"
  # replace:
  # - x: "*"
  # - t: "W"

-
  # 7.5.1 defines special rule for binomial
  name: binomial-frac
  tag: mrow
  match: "IsBracketed(., '(', ')') and *[2][self::m:mfrac][@linethickness=0]"
  replace: 
  - t: "‚†®‚†£"
  - x: "*[2]/*[1]"
  - t: "‚†í"
  - x: "*[2]/*[2]"
  - t: "‚†ú"

- name: binomial-table
  tag: mrow
  match: "IsBracketed(., '(', ')') and *[2][self::m:mtable][count(*)=2 and count(*[1])=1] and contains(@intent, 'binomial(')"
  replace:
  - t: "‚†®‚†£"
  - x: "*[2]/*[1]/*[1]/*[1]"
  - t: "‚†í"
  - x: "*[2]/*[2]/*[1]/*[1]"
  - t: "‚†ú"
  
-
  name: default
  tag: mrow
  match: "."
  replace: [x: "*"]

-
  name: roman_numeral
  tag: mn
  match: "@data-roman-numeral or contains(@intent, ':roman-numeral')"
  replace:
  # for uppercase, need to only have one as uppercase
  - x: "BrailleChars(., 'Polish', 1, 2)"
  - x: "BrailleChars(translate(., 'IVXLCDM', 'ivxlcdm'), 'Polish', 2, string-length(.)+1)"

# FIX: these should be pulled out into a definition
-
  name: sin
  tag: mi
  match: ".='sin'"
  replace:
  - t: "f‚†´‚†é"      # "f" -- for function, forces letter mode

-
  name: cos
  tag: mi
  match: ".='cos'"
  replace:
  - t: "f‚†´‚†â"

-
  name: tg
  tag: mi
  match: ".='tg'"
  replace:
  - t: f‚†´‚†û"

-
  name: ctg
  tag: mi
  match: ".='ctg'"
  replace:
  - t: "f‚†´‚†≥"

-
  name: sec
  tag: mi
  match: ".='sin'"
  replace:
  - t: "f‚†´‚†§"

-
  name: cosec
  tag: mi
  match: ".='cosec'"
  replace:
  - t: "f‚†´‚†£"

-
  name: const
  tag: mi
  match: ".='const'"
  replace:
  - t: "N‚†Ö"

-
  name: log
  tag: mi
  match: ".='log'"
  replace:
  - t: "f‚†´‚†á"   # FIX: unsure about 'f' to set letter mode

-
  name: ln
  tag: mi
  match: ".='ln'"
  replace:
  - t: "f‚†´‚†¶‚†á"   # FIX: unsure about 'f' to set letter mode

-
  name: signum
  tag: mi
  match: ".='sgn'"
  replace:
  - t: "N‚†é"

-
  name: limit
  tag: mi
  match: ".='lim'"
  replace:
  - t: "‚†º‚†á"  # does *not* start letter mode


-
  name: default
  tag: [mtext, mi]
  match: "."
  replace:
  - test:
      # add unit indicator
      if: "@class='MathML-unit' or contains(@intent, ':unit') or
           (not(@data-chem-element) and
            (self::m:mtext or string-length(.) > 1 or @mathvariant='normal') and
            (parent::*[1][self::m:mrow and count(*)=3 and *[2][.='\u2062'] and
                          *[1][self::m:mn or
                               (self::m:mfrac and *[1][self::m:mn] and *[2][self::m:mn]) or
                               (self::m:msup and *[1][self::m:mn])
                              ]]) and
            count(preceding-sibling::*) = 2 and 
            (IsInDefinition(., 'Braille', 'SIUnits') or
             IsInDefinition(., 'Braille', 'UnitsWithoutPrefixes') or 
             IsInDefinition(., 'Braille', 'EnglishUnits') or
             (string-length(.) >= 3 and
              substring(., 1, 2) = 'da' and 
              IsInDefinition(substring(., 3), 'Braille', 'SIUnits')) or
             (string-length(.) >= 2 and
              IsInDefinition(substring(., 1, 1), 'Braille', 'SIPrefixes') and
              IsInDefinition(substring(., 2), 'Braille', 'SIUnits')))
           )"
      then: [t: "U"]
  - x: "BrailleChars(., 'Polish')"   # also deals with "dot after 'arc'"
      

-
  # 2.5b says that hex-like numbers don't reuse a numeric indicator after a letter -- here we try to catch that case.
  # Match if: 1) has a digit, 2) has A-F after first char, 3) only has digits and A-F
  # FIX: the rule doesn't restrict itself to hex digits, but in practice, that probably covers almost all cases
  name: hex-number
  tag: [mn, mtext]
  match:
  - "string-length(translate(., '0123456789', '')) <string-length(.) and "
  - "string-length(translate(substring(., 2), 'abcdefABCDEF', '')) <string-length(.) and "
  - "translate(., '0123456789abcdefABCDEF', '')=''"
  replace:
  - x: "BrailleChars(concat(substring(.,1,1), translate(substring(., 2), 'abcdefABCDEF',
            '\ue00a\ue00b\ue00c\ue00d\ue00e\ue00f\ue01a\ue01b\ue01c\ue01d\ue01e\ue01f')), 'Polish')"

-
  name: default
  tag: [mn, mo]
  match: "."
  replace:
  - x: "BrailleChars(., 'Polish')"

-
  name: default
  tag: mstyle
  match: "."
  replace:
  - test:
      if: "*"
      then: [x: "*"]
      # else do nothing -- no content

-
  name: line
  tag: [mover, munder]
  match: "*[2][self::m:mo and .='¬Ø']"  # 0x00AF
  replace:
  - x: "IfThenElse(self::m:mover, '‚†®', '‚†∏')"
  - t: "‚†í"
  - x: "*[1]"
-
  name: double-dot
  tag: mover
  match: "*[2][self::m:mo and .='..']"  # 0x00AF
  replace:
  - x: "*[1]"
  - T: "‚†Ü‚†Ü"
  
-
  name: diacriticals
  tag: mover
  match: "*[2][self::m:mo and translate(., '~ ^Àá.', '')='']"
  replace:
  - x: "*[1]"
  - test:
      if: "not($Polish_UseShortForm)"
      then: [T: "‚†®"]
  - x: "*[2]"

-
  name: pseudo-scripts
  tag: msup
  match: "*[2][translate(., \"'‚Ä≤‚Ä≥‚Ä¥‚Åó*‚Üí‚ü∂‚Üê‚üµ+-¬¨.ÀôÀáÃä¬∞\", '')='']"
  replace:
  - x: "*[1]"
  - test:
      if: "not($Polish_UseShortForm)"
      then: [T: "‚†ò"]
  - x: "*[2]"

-
  name: limit
  tag: munder
  match: "*[1][self::m:mi and .='lim']"
  replace:
  - x: "*[1]"
  - x: "*[2]"
  - x: "W"

-
  name: prime-exception    # 4.3.1
  tag: msubsup
  match: "*[3][translate(., \"‚Ä≤‚Ä≥‚Ä¥‚Åó\",'')='']"
  replace:
  - x: "*[1]"
  - x: "*[3]"
  - t: "‚†å"
  - x: "*[2]"

-
  name: log-with-base
  tag: msub
  match: "*[1][self::m:mi and .='log']"
  replace:
  - t: "‚†å"
  - test:
      if: "*[2][self::m:mn and not(contains(., $DecimalSeparators))]"
      then: [x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"]
      else: [x: "*[2]"]
  - x: "*[1]"
-
  # simple numeric scripts are written as drop numbers
  name: simple-number-exponent
  tag: [msub, msup]
  match: "*[2][(self::m:mn and not(contains(., $DecimalSeparators))) or
               (self::m:mrow and count(*)=2 and *[1]='-' and *[2][self::m:mn and not(contains(., $DecimalSeparators))])]"
  replace:
  - x: "*[1]"
  - test:
      - if: "self::m:msup"
        then: [t: "‚†¨"]   # FIX: find out which is right, could be "‚†å"
        else: [t: "‚†°"]
  - test:
      if: "*[2][self::m:mn]"
      then:
      - x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"
      else:
      - x: "*[2]/*[1]"
      - x: "BrailleChars(translate(*[2]/*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"   # drop numbers for the numerator

-
  name: single-char-exceptions    # 4.3.1
  tag: msup
  match: "*[2][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
  replace:
  - x: "*"
  - test:
      # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
      if: "not(*[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
      then: [t: "‚†Ñ"]

-
  name: single-char-exceptions    # 4.3.1
  tag: msubsup
  match: "*[3][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
  replace:
  - x: "*[1]"
  - x: "*[3]"
  - test:
      # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
      if: "not(*[3][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
      then: [t: "‚†Ñ"]
  - x: "*[2]"

-  # 9.2 (guessing this applies to limits written with both munder and msub)
  name: known-functions
  tag: [munder, msub]
  match: "*[1][self::m:mi][.='log' or .='lim']"
  replace: 
  - x: "*[1]"    # trailing dot 3 handled by mi rule
  - x: "*[2]"
  - t: "‚†±"

-  # 9.4
  name: integral-sum-product
  tag: [msub, munder, msubsup, munderover]
  match: "*[1][self::m:mo][translate(., '‚à´‚à¨‚à≠‚àÆ‚àë‚àè‚àê‚ãÉ‚ãÇ‚ãÅ‚ãÄ', '')='']"
  replace:
  - x: "*[1]"
  - test:   # removed parens/brackets per 5.5.1 (etc)
      if: "*[2][IsBracketed(., '(', ')') or IsBracketed(., '[', ']')]"
      then: [x: "*[2]/*[2]"]
      else: [x: "*[2]"]
  - test:
      if: "self::m:msubsup or self::m:munderover"
      then:
      - t: "‚†í"
      - test:   # removed parens/brackets per 5.5.1 (etc)
          if: "*[3][IsBracketed(., '(', ')') or IsBracketed(., '[', ']')]"
          then: [x: "*[3]/*[2]"]
          else: [x: "*[3]"]
  - t: "‚†±"

# - # 4.2.2 -- numeric subscripts 
  # Feedback from Jaime Mu√±oz Carenas is that they are only used for 2D structures (multiline)
  # the rule doesn't mention having a simple base, but I think that is what is meant
  # name: numeric-subscripts
  # tag: msub
  # match:
  # - "*[1][self::m:mi] and"
  # - "*[2][self::m:mn][not(contains(., '.,'))] and ..[1][not(IsNode(., 'modified'))]"
  # replace:
  # - x: "*[1]"
  # - t: "ùëÅ"    # don't add numeric indicator
  # - x: "BrailleChars(translate(*[2], '0123456789', '\ue000\ue001\ue002\ue003\ue004\ue005\ue006\ue007\ue008\ue009'), 'Polish')"   # drop numbers for the subscript

-
  name: nested-scripts    # this case likely should have been written as mmultiscripts, but people will use this (4.4.2)
  tag: msub
  match: "*[1][self::m:msup]"
  replace:
  - x: "*[1]/*[1]"
  - t: "‚†°"
  - x: "*[1]/*[2]"
  - t: "‚†∞‚†å"
  - x: "*[2]"

-
  name: nested-scripts    # this case likely should have been written as mmultiscripts, but people will use this (2.5)
  tag: msup
  match: "*[1][self::m:msub]"
  replace:
  - x: "*[1]/*[1]"
  - t: "‚†å"
  - x: "*[1]/*[2]"
  - t: "‚†ò‚†°"
  - x: "*[2]"

-
  name: default
  tag: [msub, msup, msubsup]
  match: "."
  replace:
  - x: "*[1]"
  - test:
      - if: "self::m:msub or self::m:msubsup"
        then: [t: "‚†°"]
      - else_if: "self::m:msup"
        then: [t: "‚†¨"]
  - x: "*[2]"
  - test:
      if: "self::m:msubsup"
      then:
      - t: "‚†¨"
      - x: "*[3]"

-
  # This is incredibly messy because it needs to handle all the special cases for scripts, and then repeat them for each pre/postscript
  # Note: the rules for figuring out the order are in 4.4.1
  # In particular, some post superscripts like "'" come before the prescripts. This probably only makes sense if they are the first postscript
  # FIX: I have very little confidence this is correct when there is more than one prescript or more than one postscript
  name: default
  tag: mmultiscripts
  match: "."
  variables:
  # computing the number of postscripts is messy because of <mprescripts> being optionally present -- we use "mod" to get the count right
  - Prescripts: "m:mprescripts/following-sibling::*"
  - NumChildren: "count(*)"       # need to stash this since the count is wrong inside '*[...]' below
  - Postscripts: "*[position()>1 and position() < (last() + ($NumChildren mod 2) -count($Prescripts))]"
  replace:
  - x: "*[1]"
  - test: # special case superscript postscripts that preceed the prescripts
      if: "$Postscripts and not($Postscripts[2][self::m:none]) and $Postscripts[2][translate(., \"‚Ä≤‚Ä≥‚Ä¥‚Åó'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
      then:
      - x: "$Postscripts[2]"
      - test:
          # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
          if: "translate($Postscripts[2], \"‚Ä≤‚Ä≥‚Ä¥‚Åó\", '')!='' and not($Postscripts[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
          then: [t: "‚†Ñ"]
  - test:
      if: "$Prescripts"
      then:
      - test:
          if: "not($Prescripts[1][self::m:none])"
          then:
          - t: "‚††‚†å"
          - test:
              - if:
                - "$Prescripts[1][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                - "count($Prescripts[1]/*) > 3 and string-length($Prescripts[1]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                - "$Prescripts[1][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                then:
                - x: "BrailleChars(count($Prescripts[1]/*), 'Polish')"
                - x: "$Prescripts[1]/*[1]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Prescripts[1][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Prescripts[1][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                then:
                - x: "$Prescripts[1]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Prescripts[1][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Prescripts[1][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                then:
                - t: "‚†¢"
                - x: "$Prescripts[1]"
                - t: "‚†î"
                else:
                - x: "$Prescripts[1]"
      - test:
          if: "not($Prescripts[2][self::m:none])"
          then:
          - t: "‚†à‚†°"
          - test:
              - if:
                - "$Prescripts[2][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                - "count($Prescripts[2]/*) > 3 and string-length($Prescripts[2]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                - "$Prescripts[2][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                then:
                - x: "BrailleChars(count($Prescripts[2]/*), 'Polish')"
                - x: "$Prescripts[2]/*[1]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Prescripts[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Prescripts[2][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                then:
                - x: "$Prescripts[2]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Prescripts[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Prescripts[2][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                then:
                - t: "‚†¢"
                - x: "$Prescripts[2]"
                - t: "‚†î"
                else:
                - x: "$Prescripts[2]"
      - test:
          if: "count($Prescripts)>2"
          then:
          - test:
              if: "not($Prescripts[3][self::m:none])"
              then:
              - t: "‚††‚†å"
              - test:
                  - if:
                    - "$Prescripts[3][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                    - "count($Prescripts[3]/*) > 3 and string-length($Prescripts[3]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                    - "$Prescripts[3][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                    then:
                    - x: "BrailleChars(count($Prescripts[3]/*), 'Polish')"
                    - x: "$Prescripts[3]/*[1]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Prescripts[3][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Prescripts[3][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                    then:
                    - x: "$Prescripts[3]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Prescripts[3][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Prescripts[3][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                    then:
                    - t: "‚†¢"
                    - x: "$Prescripts[3]"
                    - t: "‚†î"
                    else:
                    - x: "$Prescripts[3]"
          - test:
              if: "not($Prescripts[4][self::m:none])"
              then:
              - t: "‚†à‚†°"
              - test:
                  - if:
                    - "$Prescripts[4][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                    - "count($Prescripts[4]/*) > 3 and string-length($Prescripts[4]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                    - "$Prescripts[4][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                    then:
                    - x: "BrailleChars(count($Prescripts[4]/*), 'Polish')"
                    - x: "$Prescripts[4]/*[1]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Prescripts[4][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Prescripts[4][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                    then:
                    - x: "$Prescripts[4]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Prescripts[4][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Prescripts[4][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                    then:
                    - t: "‚†¢"
                    - x: "$Prescripts[4]"
                    - t: "‚†î"
                    else:
                    - x: "$Prescripts[4]"
          - test:
              if: "count($Prescripts) > 4"   # give up and just dump them out so at least the content is there
              then: [x: "$Prescripts[position() > 4]"]

  - test:
      if: "$Postscripts"
      then:
      - test:
          if: "not($Postscripts[1][self::m:none])"
          then:
          - t: "‚†å"
          - test:
              - if:
                - "$Postscripts[1][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                - "count($Postscripts[1]/*) > 3 and string-length($Postscripts[1]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                - "$Postscripts[1][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                then:
                - x: "BrailleChars(count($Postscripts[1]/*), 'Polish')"
                - x: "$Postscripts[1]/*[1]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Postscripts[1][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Postscripts[1][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                then:
                - x: "$Postscripts[1]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Postscripts[1][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Postscripts[1][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                then:
                - t: "‚†¢"
                - x: "$Postscripts[1]"
                - t: "‚†î"
                else:
                - x: "$Postscripts[1]"
      - test:
          if: "not($Postscripts[2][self::m:none]) and $Postscripts[2][translate(., \"‚Ä≤‚Ä≥‚Ä¥‚Åó'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')!='']"
          then:
          - t: "‚†°"
          - test:
              - if:
                - "$Postscripts[2][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                - "count($Postscripts[2]/*) > 3 and string-length($Postscripts[2]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                - "$Postscripts[2][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                then:
                - x: "BrailleChars(count($Postscripts[2]/*), 'Polish')"
                - x: "$Postscripts[2]/*[1]"
                - test:
                    # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                    if: "not($Postscripts[2][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                    then: [t: "‚†Ñ"]
              - else_if: "$Postscripts[2][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                then:
                - t: "‚†¢"
                - x: "$Postscripts[2]"
                - t: "‚†î"
                else:
                - x: "$Postscripts[2]"
      - test:
          if: "count($Postscripts)>2"
          then:
          - test:
              if: "not($Postscripts[3][self::m:none])"
              then:
              - t: "‚†∞‚†å"
              - test:
                  - if:
                    - "$Postscripts[3][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                    - "count($Postscripts[3]/*) > 3 and string-length($Postscripts[3]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                    - "$Postscripts[3][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                    then:
                    - x: "BrailleChars(count($Postscripts[3]/*), 'Polish')"
                    - x: "$Postscripts[3]/*[1]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Postscripts[3][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Postscripts[3][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                    then:
                    - x: "$Postscripts[3]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Postscripts[3][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Postscripts[3][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                    then:
                    - t: "‚†¢"
                    - x: "$Postscripts[3]"
                    - t: "‚†î"
                    else:
                    - x: "$Postscripts[3]"
          - test:
              if: "not($Postscripts[4][self::m:none])"
              then:
              - t: "‚†ò‚†°"
              - test:
                  - if:
                    - "$Postscripts[4][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                    - "count($Postscripts[4]/*) > 3 and string-length($Postscripts[4]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                    - "$Postscripts[4][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                    then:
                    - x: "BrailleChars(count($Postscripts[4]/*), 'Polish')"
                    - x: "$Postscripts[4]/*[1]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Postscripts[4][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Postscripts[4][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                    then:
                    - x: "$Postscripts[4]"
                    - test:
                        # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                        if: "not($Postscripts[4][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                        then: [t: "‚†Ñ"]
                  - else_if: "$Postscripts[4][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                    then:
                    - t: "‚†¢"
                    - x: "$Postscripts[4]"
                    - t: "‚†î"
                    else:
                    - x: "$Postscripts[4]"
          - test:
              if: "count($Postscripts)>4"
              then:
              - test:
                  if: "not($Postscripts[5][self::m:none])"
                  then:
                  - t: "‚†∞‚†å"
                  - test:
                      - if:
                        - "$Postscripts[5][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                        - "count($Postscripts[5]/*) > 3 and string-length($Postscripts[5]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                        - "$Postscripts[5][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                        then:
                        - x: "BrailleChars(count($Postscripts[5]/*), 'Polish')"
                        - x: "$Postscripts[5]/*[1]"
                        - test:
                            # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                            if: "not($Postscripts[5][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                            then: [t: "‚†Ñ"]
                      - else_if: "$Postscripts[5][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                        then:
                        - x: "$Postscripts[5]"
                        - test:
                            # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                            if: "not($Postscripts[5][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                            then: [t: "‚†Ñ"]
                      - else_if: "$Postscripts[5][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                        then:
                        - t: "‚†¢"
                        - x: "$Postscripts[5]"
                        - t: "‚†î"
                        else:
                        - x: "$Postscripts[5]"
              - test:
                  if: "not($Postscripts[6][self::m:none])"
                  then:
                  - t: "‚†ò‚†°"
                  - test:
                      - if:
                        - "$Postscripts[6][self::m:mrow[not(./*[name() != 'mo'])]] and" # script consists of all mo's
                        - "count($Postscripts[6]/*) > 3 and string-length($Postscripts[6]/*[1])=1 and"    # at least four mo's, the first of which has a single char
                        - "$Postscripts[6][ not(./*[text()] != *[1][text()]) ]" # they are all have the same text (we know it is an mrow)
                        then:
                        - x: "BrailleChars(count($Postscripts[6]/*), 'Polish')"
                        - x: "$Postscripts[6]/*[1]"
                        - test:
                            # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                            if: "not($Postscripts[6][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                            then: [t: "‚†Ñ"]
                      - else_if: "$Postscripts[6][translate(., \"'*`+-¬™¬∞¬≤¬≥¬¥¬π¬∫‚Äò‚Äô‚Äú‚Äù‚Äü‚Äµ‚Ä∂‚Ä∑\",'')='']"
                        then:
                        - x: "$Postscripts[6]"
                        - test:
                            # degree doesn't use dot-3 for chemistry, temp, angles -- can't know that so we make a wild guess here
                            if: "not($Postscripts[6][.='¬∞'] and *[1][self::m:mn or @data-chem-element])" 
                            then: [t: "‚†Ñ"]
                      - else_if: "$Postscripts[6][((self::m:mrow and not(IsBracketed(., '', '')) and not(*[1][self::m:mo][.='-'])) or IsNode(., 'modified')) or self::m:mfrac]"
                        then:
                        - t: "‚†¢"
                        - x: "$Postscripts[6]"
                        - t: "‚†î"
                        else:
                        - x: "$Postscripts[6]"
              - test:
                  if: "count($Postscripts) > 6"   # give up and just dump them out so at least the content is there
                  then: [x: "$Postscripts[position() > 6]"]
                  

-
# Note: @notation can contain more than one value
# I don't think CMU has a good way to represent all notations, especially when in combination
# FIX: this needs to be flushed out
  name: default
  tag: menclose
  match: "."
  replace:
  - test:
      if: "contains(@notation,'box')"
      then_test: 
          if: "*[1][self::m:mtext and .='\u00A0']"                  # box and roundedbox
          then: [t: "‚†∞‚†§‚†Ü"]                            # omission
          else: [t: "1‚†´‚†º‚†ô"]                           # square (no rectangle in UEB)
      else:
      - with:
          variables:
          - IsCancellation: "contains(@notation,'updiagonalstrike') or contains(@notation,'downdiagonalstrike') or 
                             contains(@notation,'verticalstrike') or contains(@notation,'horizontalstrike')"
          replace:
          - test:
              if: "contains(@notation,'top')"
              then: [t: "‚†à‚†â"]                  # overline
          - test:
              if: "contains(@notation,'bottom')"
              then: [t: "‚††‚†§"]                  # underline
          - test:
              if: "$IsCancellation"
              then: [t: "‚†ª"]                   # cancellation
          - test:
              if: "*[1][(IsNode(., 'leaf') and (string-length(.) = 1 or IsInDefinition(., 'Braille', 'CMUFunctionNames'))) or IsBracketed(., '', '')]"
              then: [x: "*[1]"]
              else:
              - t: "‚†¢"
              - x: "*[1]"
              - t: "‚†î"

  #  - test:
  #     if: "contains(concat(' ', normalize-space(@notation), ' '), ' left ')"                  #avoid 'leftarrow'
  #     then: [t: "‚†∏"]
  #  - test:
  #     if: "contains(@notation,'circle')"
  #     then:
  #     # - test:
  #     #    if: "$AddSpaces"
  #     #    then: [t: " "]
  #     - t: "1‚†´‚†ø"                                  # circle (no oval in UEB)
# ??? What should happen with arrow?
#  If there is a box/circle with arrows only and an empty child,
#     then it acts like the arrow is the child
#  If there are only arrows for 'notation', then maybe rule 112 applies (superposition),
#     but the examples aren't similar. In that case, the arrow acts like 'box' and the child is the content... maybe  
# 
#  - test:
#      if: "contains(@notation,'leftarrow')"
#      then: [t: left arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' rightarrow ')"
#      then: [t: right arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northeastarrow')"
#      then: [t: northeast arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' southeastarrow ')"
#      then: [t: southeast arrow, pause: short]
#  - test:
#      if: "contains(concat(' ', normalize-space(@notation), ' '), ' southwestarrow ')"
#      then: [t: southwest arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northwestarrow')"
#      then: [t: northwest arrow, pause: short]
#  - test:
#      if: "contains(@notation,'updownarrow')"
#      then: [t: double ended vertical arrow, pause: short]
#  - test:
#      if: "contains(@notation,'leftrightarrow')"
#      then: [t: double ended horizontal arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northeastsouthwestarrow')"
#      then: [t: double ended up diagonal arrow, pause: short]
#  - test:
#      if: "contains(@notation,'northwestsoutheastarrow')"
#      then: [t: double ended down diagonal arrow, pause: short]
#  - test:
#      if: ".[contains(@notation,'actuarial')]"
#      then: [t: actuarial symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'madrub')]"
#      then: [t: arabic factorial symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'longdiv') or not(@notation) or normalize-space(@notation) ='']"      # default
#      then: [t: long division symbol, pause: short]
#  - test:
#      if: ".[contains(@notation,'radical')]"
#      then: [t: square root, pause: short]

  #  - test:
  #     # omit grouping indicators in the following cases
  #     if:   # FIX: need to add arbitrary shapes here (also for mroot) also multi-char leaf translations except mi
  #           # next test is to make sure there is just one symbol
  #           # FIX: the double dot test is likely wrong, but I can't find what other exceptions there are 
  #     - "*[1][self::m:mn or"
  #     - "     ((self::m:mi or self::m:mo) and string-length(text())=1 and text()!='¬®') or"
  #     - "     self::m:mfrac or self::m:msqrt or self::m:mroot or"
  #     - "     IsBracketed(., '(', ')') or IsBracketed(., '[', ']') or IsBracketed(., '{', '}') or"
  #     - "     IsInDefinition(., 'Braille', 'Arrows')"
  #     - "    ]"
  #     then: [x: "*[1]"]
  #     else:
  #     - t: "1‚†£"
  #     - x: "*[1]"
  #     - t: "1‚†ú"

   # - test:
   #    if: "contains(@notation,'phasorangle')"  #FIX: what should this be???
   #    then: [t: "‚†´‚†™‚†∏‚†´"]
  #  - test:
  #     if: "contains(@notation,'arrow')"    # all the arrows
  #     then:
  #     - test:
  #        - if: "contains(@notation,'rightarrow')" 
  #          then: [t: "1‚†≥‚†ï"]                                                           
  #        - else_if: "contains(@notation,'leftarrow')" 
  #          then: [t: "1‚†≥‚†™"]                                                           
  #        - else_if: "contains(@notation,'uparrow')" 
  #          then: [t: "1‚†≥‚†¨ "]                                                           
  #        - else_if: "contains(@notation,'downarrow')" 
  #          then: [t: "1‚†≥‚†©"]                                                           
  #        - else_if: "contains(@notation,'northeastarrow')" 
  #          then: [t: "1‚†≥‚†é"]                                                           
  #        - else_if: "contains(@notation,'southeastarrow')" 
  #          then: [t: "1‚†≥‚†£"]                                                           
  #        - else_if: "contains(@notation,'northwestarrow')" 
  #          then: [t: "1‚†≥‚†±"]                                                           
  #        - else_if: "contains(@notation,'southwestarrow')" 
  #          then: [t: "1‚†≥‚†ú"]                                                           
  #        - else_if: "contains(@notation,'leftrightarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†ï"]                                                           
  #        - else_if: "contains(@notation,'updownarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†¨"]                                                           
  #        - else_if: "contains(@notation,'northeastsouthwestarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†é"]                                                           
  #        - else_if: "contains(@notation,'northwestsoutheastarrow')" 
  #          then: [t: "1‚†≥‚†∫‚†ó‚†£"]                                                           
  #  - test:
  #     if:
  #     - "not($AddSpaces) and contains(@notation,'box') or contains(@notation,'circle') or"
  #     - "contains(@notation,'arrow') or contains(@notation,'phasorangle')" 
  #     then:
  #     - t: "‚†ª"                   # terminate shape
  #     # - test:
  #     #    if: "$AddSpaces"
  #     #    then: [t: " "]
  #  - test:
  #     if: "contains(concat(' ', normalize-space(@notation), ' '), ' right ')"                  #avoid 'rightarrow'
  #     then: [t: "‚†∏"]



-
   name: default
   tag: ms
   match: "."
   replace:
      - test:
         if: "string(@lquote)!=''"
         then: [x: "@lquote"]
         else: [t: "‚†Ñ‚†Ñ"]
      - x: "BrailleChars(., 'Polish')"
      - test:
         if: "string(@rquote)!=''"
         then: [x: "@rquote"]
         else: [t: "‚†Ñ‚†Ñ"]

-
   name: default
   tag: semantics
   match: "."
   replace: 
      - x: "*[1]"             #/ FIX: should prioritize @encoding="MathML-Presentation" and @encoding="application/mathml-presentation+xml"

-
   name: default-children
   tag: "*"
   match: "*"    # make sure there are children
   replace: 
   - t: "unknown math m l element"
   - x: "name(.)"
   - x: "*"

-
   # at this point, we know there are no children -- might be no text
   name: default-no-children
   tag: "*"
   match: "text()"
   replace: 
   - t: unknown math m l element
   - x: "name(.)"
   - x: "text()"

-
   name: default-no-text
   tag: "*"
   match: "."
   replace: 
    - t: "empty unknown math m l element"
    - x: "name(.)"
