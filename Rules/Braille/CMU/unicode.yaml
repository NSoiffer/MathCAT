---
# UEB characters
#
# Some chars that originally came from an Excel spreadsheet, converted to csv, and the greatly expanded
# 
# The UEB translation makes use of some non-braille chars as flags
#    L -- what follows is a letter
#    N -- what follows is a digit
#    C -- precedes L for capital letters
#    G -- precedes L for Greek Letters (after C for capitals)
#  Typeface Indicators ("typeforms")
#    B bold, I Italic, S Sans-serif, T script, D, Fraktur, ùîπ blackboard-bold
#    the type face indicators can be combined with B (first) and I (second)
#  Standing alone chars:
#    Any character which acts as a standing alone character (e.g, "{") needs each braille symbol to be labeled
#    o -- opening/left side, c -- closing/right side, b -- both open and close (e.g, '"')

 - "0": [t: "N‚†ö"]               # 0x30 
 - "1": [t: "N‚†Å"]               # 0x31 
 - "2": [t: "N‚†É"]               # 0x32 
 - "3": [t: "N‚†â"]               # 0x33 
 - "4": [t: "N‚†ô"]               # 0x34 
 - "5": [t: "N‚†ë"]               # 0x35 
 - "6": [t: "N‚†ã"]               # 0x36 
 - "7": [t: "N‚†õ"]               # 0x37 
 - "8": [t: "N‚†ì"]               # 0x38 
 - "9": [t: "N‚†ä"]               # 0x39 

# we stick the drop numbers into the private use area for consistency
 - "\ue000": [t: "N‚†¥"]               # 0 
 - "\ue001": [t: "N‚†Ç"]               # 1 
 - "\ue002": [t: "N‚†Ü"]               # 2 
 - "\ue003": [t: "N‚†í"]               # 3 
 - "\ue004": [t: "N‚†≤"]               # 4 
 - "\ue005": [t: "N‚†¢"]               # 5 
 - "\ue006": [t: "N‚†ñ"]               # 6 
 - "\ue007": [t: "N‚†∂"]               # 7 
 - "\ue008": [t: "N‚†¶"]               # 8 
 - "\ue009": [t: "N‚†î"]               # 9 

# we stick hex digits into the private use area for consistency
# these are used when we don't want to add a numeric indicator for subsequent digits (3.3)
 - "\ue00A": [t: "N‚†êN‚†Å"]               # A 
 - "\ue00B": [t: "N‚†êN‚†É"]               # B 
 - "\ue00C": [t: "N‚†êN‚†â"]               # C 
 - "\ue00D": [t: "N‚†êN‚†ô"]               # D 
 - "\ue00E": [t: "N‚†êN‚†ë"]               # E 
 - "\ue00F": [t: "N‚†êN‚†ã"]               # F 
# leave room for the rest of the alphabet
 - "\ue01A": [t: "N‚†®N‚†Å"]               # A 
 - "\ue01B": [t: "N‚†®N‚†É"]               # B 
 - "\ue01C": [t: "N‚†®N‚†â"]               # C 
 - "\ue01D": [t: "N‚†®N‚†ô"]               # D 
 - "\ue01E": [t: "N‚†®N‚†ë"]               # E 
 - "\ue01F": [t: "N‚†®N‚†ã"]               # F 

 - "a": [t: "L‚†Å"]               # 0x61 
 - "b": [t: "L‚†É"]               # 0x62 
 - "c": [t: "L‚†â"]               # 0x63 
 - "d": [t: "L‚†ô"]               # 0x64 
 - "e": [t: "L‚†ë"]               # 0x65 
 - "f": [t: "L‚†ã"]               # 0x66 
 - "g": [t: "L‚†õ"]               # 0x67 
 - "h": [t: "L‚†ì"]               # 0x68 
 - "i": [t: "L‚†ä"]               # 0x69 
 - "j": [t: "L‚†ö"]               # 0x6a 
 - "k": [t: "L‚†Ö"]               # 0x6b 
 - "l": [t: "L‚†á"]               # 0x6c 
 - "m": [t: "L‚†ç"]               # 0x6d 
 - "n": [t: "L‚†ù"]               # 0x6e 
 - "o":                         # 0x6f 
    - test:     # special case because these have the same dot pattern
        if: "preceding-sibling::*[1][self::m:mo and (.='>' or .='‚â´')]"
        then: [t: "‚†ê"]
    - t: "L‚†ï"
 - "p": [t: "L‚†è"]               # 0x70 
 - "q": [t: "L‚†ü"]               # 0x71 
 - "r": [t: "L‚†ó"]               # 0x72 
 - "s": [t: "L‚†é"]               # 0x73 
 - "t": [t: "L‚†û"]               # 0x74 
 - "u": [t: "L‚†•"]               # 0x75 
 - "v": [t: "L‚†ß"]               # 0x76 
 - "w": [t: "L‚†∫"]               # 0x77 
 - "x": [t: "L‚†≠"]               # 0x78 
 - "y": [t: "L‚†Ω"]               # 0x79 
 - "z": [t: "L‚†µ"]               # 0x7a 


 - "√°": [t: "L‚†∑"]               # 0xE1 
 - "√©": [t: "L‚†Æ"]               # 0xE9 
 - "√≠": [t: "L‚†å"]               # 0xED 
 - "√±": [t: "L‚†ª"]               # 0xF1 
 - "√≥": [t: "L‚†¨"]               # 0xF3 
 - "√∫": [t: "L‚†æ"]               # 0xFA 
 - "√º": [t: "L‚†≥"]               # 0xFC 

 - "√Å": [t: "CL‚†∑"]               # 0xC0 
 - "√â": [t: "CL‚†Æ"]               # 0xC9 
 - "√ç": [t: "CL‚†å"]               # 0xCD 
 - "√ë": [t: "CL‚†ª"]               # 0xD1 
 - "√ì": [t: "CL‚†¨"]               # 0xD3 
 - "√õ": [t: "CL‚†æ"]               # 0xDA 
 - "√ú": [t: "CL‚†≥"]               # 0xDC 

 - "A": [t: "CL‚†Å"]              # 0x41 
 - "B":                         # 0x42 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†É"]
        else: [t: "CL‚†É"]
 - "C":                         # 0x43 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†â"]
        else: [t: "CL‚†â"]
 - "D": [t: "CL‚†ô"]              # 0x44 
 - "E": [t: "CL‚†ë"]              # 0x45 
 - "F": [t: "CL‚†ã"]              # 0x46 
 - "G": [t: "CL‚†õ"]              # 0x47 
 - "H":                         # 0x48 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†ì"]
        else: [t: "CL‚†ì"]
 - "I":                         # 0x49 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†ä"]
        else: [t: "CL‚†ä"]
 - "J": [t: "CL‚†ö"]              # 0x4a 
 - "K":                         # 0x4b 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†Ö"]
        else: [t: "CL‚†Ö"]
 - "L": [t: "CL‚†á"]              # 0x4c 
 - "M": [t: "CL‚†ç"]              # 0x4d 
 - "N":                         # 0x4e 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†ù"]
        else: [t: "CL‚†ù"]
 - "O":                         # 0x4f 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†ï"]
        else: [t: "CL‚†ï"]
 - "P":                         # 0x50 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†è"]
        else: [t: "CL‚†è"]
 - "Q": [t: "CL‚†ü"]              # 0x51 
 - "R": [t: "CL‚†ó"]              # 0x52 
 - "S":                         # 0x53 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†é"]
        else: [t: "CL‚†é"]
 - "T": [t: "CL‚†û"]              # 0x54 
 - "U":                         # 0x55 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†•"]
        else: [t: "CL‚†•"]
 - "V":                         # 0x56 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†ß"]
        else: [t: "CL‚†ß"]
 - "W":                         # 0x57 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†∫"]
        else: [t: "CL‚†∫"]
 - "X": [t: "CL‚†≠"]              # 0x58 
 - "Y":                         # 0x59 
    - test:
        if: "@data-chem-element"
        then: [t: "ùê∂L‚†Ω"]
        else: [t: "CL‚†Ω"]
 - "Z": [t: "CL‚†µ"]              # 0x5a 

 - "Œ±": [t: "GL‚†Å"]              # 0x3b1 
 - "Œ≤": [t: "GL‚†É"]              # 0x3b2 
 - "Œ≥": [t: "GL‚†õ"]              # 0x3b3 
 - "Œ¥": [t: "GL‚†ô"]              # 0x3b4 
 - "Œµ": [t: "GL‚†ë"]              # 0x3b5 
 - "Œ∂": [t: "GL‚†µ"]              # 0x3b6 
 - "Œ∑": [t: "GL‚†±"]             # 0x3b7 
 - "Œ∏": [t: "GL‚†π"]              # 0x3b8 
 - "Œπ": [t: "GL‚†ä"]              # 0x3b9 
 - "Œ∫": [t: "GL‚†Ö"]              # 0x3ba 
 - "Œª": [t: "GL‚†á"]              # 0x3bb 
 - "Œº": [t: "GL‚†ç"]              # 0x3bc 
 - "ŒΩ": [t: "GL‚†ù"]              # 0x3bd 
 - "Œæ": [t: "GL‚†≠"]              # 0x3be 
 - "Œø": [t: "GL‚†ï"]              # 0x3bf 
 - "œÄ": [t: "GL‚†è"]              # 0x3c0 
 - "œÅ": [t: "GL‚†ó"]              # 0x3c1 
 - "œÇ": [t: "VL‚†é"]              # 0x3c2 
 - "œÉ": [t: "GL‚†é"]              # 0x3c3 
 - "œÑ": [t: "GL‚†û"]              # 0x3c4 
 - "œÖ": [t: "GL‚†•"]              # 0x3c5 
 - "œÜ": [t: "GL‚†ã"]              # 0x3c6 
 - "œá": [t: "GL‚†Ø"]              # 0x3c7 
 - "œà": [t: "GL‚†Ω"]              # 0x3c8 
 - "œâ": [t: "GL‚†∫"]              # 0x3c9 

 - "Œë": [t: "CGL‚†Å"]             # 0x391 
 - "Œí": [t: "CGL‚†É"]             # 0x392 
 - "Œì": [t: "CGL‚†õ"]             # 0x393 
 - "Œî": [t: "CGL‚†ô"]             # 0x394 
 - "Œï": [t: "CGL‚†ë"]             # 0x395 
 - "Œñ": [t: "CGL‚†µ"]             # 0x396 
 - "Œó": [t: "CGL‚†± "]            # 0x397 
 - "Œò": [t: "CGL‚†π"]             # 0x398 
 - "Œô": [t: "CGL‚†ä"]             # 0x399 
 - "Œö": [t: "CGL‚†Ö"]             # 0x39a 
 - "Œõ": [t: "CGL‚†á"]             # 0x39b 
 - "Œú": [t: "CGL‚†ç"]             # 0x39c 
 - "Œù": [t: "CGL‚†ù"]             # 0x39d 
 - "Œû": [t: "CGL‚†≠"]             # 0x39e 
 - "Œü": [t: "CGL‚†ï"]             # 0x39f 
 - "Œ†": [t: "CGL‚†è"]             # 0x3a0 
 - "Œ°": [t: "CGL‚†ó"]             # 0x3a1 
 - "Œ¢": [t: "CGL‚†é"]             # 0x3a2 
 - "Œ£": [t: "CGL‚†é"]             # 0x3a3 
 - "Œ§": [t: "CGL‚†û"]             # 0x3a4 
 - "Œ•": [t: "CGL‚†•"]             # 0x3a5 
 - "Œ¶": [t: "CGL‚†ã"]             # 0x3a6 
 - "Œß": [t: "CGL‚†Ø"]             # 0x3a7 
 - "Œ®": [t: "CGL‚†Ω"]             # 0x3a8 
 - "Œ©": [t: "CGL‚†∫"]             # 0x3a9

 - "œë": [t: "VL‚†π"]              # 0x3d1
 - "œµ": [t: "VL‚†ë"]              # 0x3f5
 - "œ∞": [t: "VL‚†Ö"]              # 0x3f0
 - "œï": [t: "VL‚†ã"]              # 0x3d5
 - "œ±": [t: "VL‚†ó"]              # 0x3f1
 - "œñ": [t: "VL‚†è"]              # 0x3d6
 - "œú": [t: "VL‚†ß"]              # 0x3d7

 - "¬µ": [t: "GL‚†ç"]              # 0x00B5 (Micro (Greek mu))
 - "‚Ñ¶": [t: "CGL‚†∫"]             # 0x2126 (Ohm sign (capital Greek omega))
 - "‚àÜ": [t: "‚†∏‚†¶"]               # 0x2206 (Increment)
 - "‚àè":                         # 0x220F (Product (capital Greek pi))
    - t: "CGL‚†è"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚àê":                         # 0x2210 (CoProduct (capital Greek pi))
    - t: "‚†ò‚†ª"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚àë":                          # 0x2211 (Sum (capital Greek sigma))
    - t: "CGL‚†é"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]

 - "<": [t: "‚†™"]               # 0x003C (Less than)
 - "‚â®": [t: "‚†™"]               # 0x2268 (Less-Than But Not Equal To)
 - "‚ã¶": [t: "‚†™"]               # 0x22E6 (Less-Than But Not Equivalent To)
 - ">": [t: "‚†ï"]               # 0x003E (Greater than)
 - "‚â©": [t: "‚†ï"]               # 0x2269 (Greater-Than But Not Equal To)
 - "‚ãß": [t: "‚†ï"]               # 0x22E7 (Greater-Than But Not Equivalent To)
#  - "‚âÆ": [t: "‚†à‚†£‚†à‚†±"]             # 0x226E (Not less than)
#  - "‚âØ": [t: "‚†à‚†ú‚†à‚†±"]             # 0x226F (Not greater than)
#  - "‚â∞": [t: "‚†∏‚†à‚†£‚†à‚†±"]            # 0x2270 (Neither less than nor equal to)
#  - "‚â±": [t: "‚†∏‚†à‚†ú‚†à‚†±"]            # 0x2271 (Neither greater than nor equal to)
#  - "‚àù": [t: "‚†∏‚†ê‚†∂"]              # 0x221D (Proportional to)
#  - "‚âÉ": [t: "‚†∏‚†î"]               # 0x2243 (Approximately equal to (tilde over horizontal line))
#  - "‚âÖ": [t: "‚†ê‚†∏‚†î"]               # 0x2245 (Approximately equal to (tilde over equals sign))
#  - "‚âè": [t: "‚†ò‚†ê‚†∂"]              # 0x224F (Equals with bump in top bar (difference between))
#  - "‚â¢": [t: "‚†∏‚†ø‚†à‚†±"]             # 0x2262 (Not identical to)
#  - "‚àà": [t: "‚†ò‚†ë"]               # 0x2208 (Element of (member of))
#  - "‚àâ": [t: "‚†ò‚†ë‚†à‚†±"]            # 0x2209 (Not Element of)
 - "+": [t: "‚†ñ"]               # 0x002B (Plus sign)
#  - "‚àã": [t: "‚†à‚†ò‚†ë"]              # 0x220B (Contains)
#  - "‚äÇ": [t: "‚†ò‚†£"]              # 0x2282 (Subset of)
#  - "‚äÉ": [t: "‚†ò‚†ú"]              # 0x2283 (Superset of)
#  - "‚äÜ": [t: "‚†∏‚†ò‚†£"]             # 0x2286 (Subset of or equal)
#  - "‚äá": [t: "‚†∏‚†ò‚†ú"]             # 0x2287 (Superset of or equal)
#  - "‚ää": [t: "‚†®‚†ò‚†£"]             # 0x228A (Subset of with not equal)
#  - "‚äã": [t: "‚†®‚†ò‚†ú"]             # 0x228B (Superset of with not equal)
#  - "‚ä≤": [t: "‚†à‚†∏‚†£"]             # 0x22B2 (Normal subgroup of)
#  - "‚ä≥": [t: "‚†à‚†∏‚†ú"]             # 0x22B3 (Contains as normal subgroup)
#  - "‚ä¥": [t: "‚†∏‚†∏‚†£"]             # 0x22B4 (Normal subgroup of or equal)
#  - "‚äµ": [t: "‚†∏‚†∏‚†ú"]             # 0x22B5 (Contains as normal subgroup or equal)
#  - "‚ã¨": [t: "‚†®‚†∏‚†£"]             # 0x22EC (not normal subgroup) -- this isn't the same as what is in GTM 10, but that similar has no Unicode equiv
#  - "‚ã≠": [t: "‚†®‚†∏‚†£"]             # 0x22ED (does not contain as normal subgroup) -- this isn't the same as what is in GTM 10, but that similar has no Unicode equiv
#  - "‚ä¢": [t: "‚†∏‚†í"]               # 0x22a2 (Right tack)
#  - "‚ä£": [t: "‚†à‚†∏‚†í"]              # 0x22a3 (Left tack)
 - "‚àí": [t: "‚†ê‚†§"]               # 0x2212 (Minus sign)
 - "¬∑": [t: "‚††ùòÑ"]               # 0x00B7 (Multiplication dot (times))
#  - "‚àó": [t: "‚†ê‚†î"]               # 0x2217 (Asterisk operator)
 - "‚àò": [t: "‚††‚†Ü"]               # 0x2218 (Ring operator)  value based on last row in 5.1 (probably what they should have used)
 - "‚ó¶": [t: "‚††‚†Ü"]               # 0x25E6 (White bullet) (value based on 2218)
 - "‚ãÖ": [t: "‚†∞‚†Ñ"]               # 0x22C5 (Dot operator)(value based on 2218)
#  - "‚àñ": [t: "‚†∏‚†°"]               # 0x2216 (Set minus)
 - "(": [t: "‚†£"]               # 0x0028 (Left parenthesis)
 - ")": [t: "‚†ú"]               # 0x0029 (Right parenthesis)
 - "[": [t: "‚†∑"]               # 0x005B (Left square bracket)
 - "]": [t: "‚†æ"]               # 0x005D (Right square bracket)
 - "!":                       # 0x21 (Exclamation (factorial))
     - test:    # CMU seems to use a different char for factorial (7.5) -- this weak guess for factorial
        if: "self::m:mo and preceding-sibling::*"
        then: [t: "‚†ò‚†Ñ"]
        else: [t: "‚†ñ"]
 - "&": [t: "‚††‚†Ø"]               # 0x26 (Ampersand)
 - "*": [t: "‚†≤"]               # 0x002A (Asterisk)
 - "?": [t: "‚†¢"]               # 0x003F (Question mark)
 - "¬ø": [t: "‚†¢"]               # 0x00BF (Question mark)
 - "@": [t: "‚†ê"]               # 0x0040 (Commercial at sign)
 - "^":                        # 0x005E (Caret (hat, up arrow)) 4.3.2 uses one form as a circumflex, and 11.1 as a geometric angle
    - test:    # it is not clear how to distinguish one form from another -- the following passes the tests, but is almost certainly wrong
        - if: "..[self::m:mover][ *[1][self::m:mi and string-length(.)=1 and translate(., 'abcdefghijklmnopqrstuvwxyz', '') = ''] ]"
          then: [t: "‚†∞‚†í"]   # circumflex
          else: [t: "‚†ò‚†í"]   # angle and everything else
 - "_": [t: "‚†§"]               # 0x005F (Low line (underscore))
 - "¬Ø": [t: "‚†à‚†â"]               # 0x00AF (macron)
 - "‚ïê": [t: "‚†à‚†â‚†à‚†â"]             # 0x2550 (BOX DRAWINGS DOUBLE HORIZONTAL)
 - "~":                        # 0x007E (Tilde (swung dash))
    - test:           # unclear what really should happen see 4.3.2, 4.3.3, 6.1, and 8.2 -- all use different codes
        - if: "..[self::m:mover]"
          then: [t: "‚†ê‚†¢"]
        - else_if: "..[self::m:munder]"
          then: [t: "‚††‚†¢"] 
        - else_if: "not(preceding-sibling::*)"
          then: [t: "‚††‚†Ñ"]     # (8.2 -- prefix?)
          else: [t: "‚†ê‚†¢‚††"]   # (6.1 -- infix?)
 - ‚àº:                        # 223c (Tilde operator)
    - test:           # unclear what really should happen see 4.3.2, 4.3.3, 6.1, and 8.2 -- all use different codes
        - if: "..[self::m:mover]"
          then: [t: "‚†ê‚†¢"]
        - else_if: "..[self::m:munder]"
          then: [t: "‚††‚†¢"] 
        - else_if: "not(preceding-sibling::*)"
          then: [t: "‚††‚†Ñ"]     # (8.2 -- prefix?)
          else: [t: "‚†ê‚†¢‚††"]   # (6.1 -- infix?)
 - "‚Äî": [t: "‚†§‚†§"]               # 0x2014 (Em dash)
 - "‚Äñ": [t: "‚†∏‚†á"]               # 0x2016
#  - "¬¶": [t: "‚†®‚†≥"]               # 0x00A6 (Broken bar)
#  - "¬¨": [t: "‚†à‚†π"]               # 0x00AC (Not sign)
 - "¬∞": [t: "‚†¥"]                 # 0x00B0 (Degree sign)
 - "¬≤": [t: "‚†°‚†º‚†É‚†â"]              # 0x00B2 (superscripted 2)
 - "¬≥": [t: "‚†°‚†º‚†â"]               # 0x00B3 (superscripted 3)
#  - "‚Ä†": [t: "‚†à‚††‚†π"]              # 0x2020 (Dagger)
#  - "‚Ä°": [t: "‚†à‚††‚†ª"]              # 0x2021 (Double dagger)
#  - "‚Ä∞": [t: "‚†∏‚†¥‚†¥"]              # 0x2030 (Per mille)
 - "‚Ä≤": [t: "‚†≥"]                  # 0x2032 (Prime sign)
 - "‚Ä≥": [t: "‚†≥‚†≥"]                 # 0x2033 (Double prime sign)
 - "‚Ä¥": [t: "‚†≥‚†≥‚†≥"]                # 0x2034 (Triple prime sign)
#  - "‚Ñ´": [t: "‚††‚†ò‚†´‚†Å"]             # 0x212B (Angstrom symbol)
#  - "√Ö": [t: "‚††‚†ò‚†´‚†Å"]             # 0x00C5 (WIRIS uses this for Angstrom)
#  - "‚àÄ": [t: "‚†ò‚†Å"]               # 0x2200 (For all)
 - "‚àÇ": [t: "‚†∏‚†ô"]               # 0x2202 (Partial differential)
#  - "‚àÉ": [t: "‚†ò‚†¢"]               # 0x2203 (There exists)
#  - "‚àÑ": [t: "‚†ò‚†¢‚†à‚†±"]             # 0x2204 (There does not exist)
#  - "‚àÖ": [t: "‚†à‚†ö"]               # 0x2205 (Empty set)
#  - "‚àé": [t: "‚†∏‚†´‚†º‚†ôt"]            # 0x220E (End of proof)
#  - "‚àö": [t: "‚†ê‚†©"]               # 0x221A (Square root (radical) without vinculum)
#  - "‚à†": [t: "‚†∏‚†™"]               # 0x2220 (Angle)
#  - "‚à°": [t: "‚†®‚†∏‚†™"]              # 0x2221 (Measured angle)
#  - "‚äæ": [t: "‚†º‚†∏‚†™"]              # 0x22BE (Right angle with arc)
 - "‚à´":                            # 0x222B (Integral)
    - t: "‚†Ø"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚à¨":                           # 0x222c (Double integral)
    - t: "‚†Ø‚†Ø"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚à≠":                           # 0x222d (Triple integral)
    - t: "‚†Ø‚†Ø‚†Ø"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚àÆ":                           # 0x222E (Contour integral (closed line integral))
    - t: "‚†Ø‚†¥"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
#  - "‚à∑": [t: "‚†í‚†í"]              # 0x2237 (Proportion)
#  - "‚à£": [t: "‚†∏‚†≥"]               # 0x2223 (Divides)
#  - "‚à§": [t: "‚†∏‚†≥‚†à‚†±"]             # 0x2224 (Does not divide)
 - "‚Üê":                            # 0x2190 (Leftwards arrow)
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow)
        - "(..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "(..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        then: [t: "‚†ê‚†í‚†í"]  # 9.1
        else: [t: "‚†ê‚†í"]   # 9.2
 - "‚üµ":                         # 0x27F5 (Long leftwards arrow)
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow)
        - "(..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "(..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        then: [t: "‚†ê‚†í‚†í"]  # 9.1
        else: [t: "‚†ê‚†í"]   # 9.2
 - "‚Üí":                          # 0x2192 (Rightwards arrow)
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow), but rule out limit
        - "("
        - "  (..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "  (..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        - ") and"
        - "not(../..[self::m:munder or self::m:msub][*[1][self::m:mi and starts-with(., 'lim')]])"
        then: [t: "‚†í‚†í‚†Ç"]  # 9.1
        else: [t: "‚†í‚†Ç"]   # 9.2
 - "‚ü∂":                       # 0x27F6 (Long rightwards arrow)
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow), but rule out limit
        - "("
        - "  (..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "  (..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        - ") and"
        - "not(../..[self::m:munder or self::m:msub][*[1][self::m:mi and starts-with(., 'lim')]])"
        then: [t: "‚†í‚†í‚†Ç"]  # 9.1
        else: [t: "‚†í‚†Ç"]   # 9.2
 - "‚áÄ":                       # 0x21C0 (RIGHTWARDS HARPOON WITH BARB UPWARDS)  [not mentioned in spec]
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow), but rule out limit
        - "("
        - "  (..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "  (..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        - ") and"
        - "not(../..[self::m:munder or self::m:msub][*[1][self::m:mi and starts-with(., 'lim')]])"
        then: [t: "‚†í‚†í‚†Ç"]  # 9.1
        else: [t: "‚†í‚†Ç"]   # 9.2
 - "‚Üî":                     # 0x2194 (Left right arrow)
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow)
        - "(..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "(..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        then: [t: "‚†ê‚†í‚†í‚†Ç"]  # 9.1
        else: [t: "‚†ê‚†í‚†Ç"]   # 9.2
 - "‚ü∑":                 # 0x27F7 (Long Left right arrow)
    - test:  # this is a guess as to when to use each
        if:  # mi on either side or if parent is mover, mi on either side of the parent (e.g., A‚ü∂B or labeled arrow)
        - "(..[self::m:mrow] and preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]) or "
        - "(..[self::m:mover][ ..[self::m:mrow][preceding-sibling::*[1][self::m:mi] and following-sibling::*[1][self::m:mi]] ])"
        then: [t: "‚†ê‚†í‚†í‚†Ç"]  # 9.1
        else: [t: "‚†ê‚†í‚†Ç"]   # 9.2
#  - "‚Üö": [t: "1‚†≥‚†™‚†à‚†±"]            # 0x219A (Leftwards arrow with stroke)
#  - "‚Üõ": [t: "1‚†≥‚†ï‚†à‚†±"]            # 0x219B (Rightwards arrow with stroke)
#  - "‚Üú": [t: "1‚†≥‚†î‚†¢‚†™"]            # 0x219C (Leftwards wave arrow)
#  - "‚Üù": [t: "1‚†≥‚†¢‚†î‚†ï"]            # 0x219D (Rightwards wave arrow)
#  - "‚Üû": [t: "1‚†≥‚†í‚†ó‚†ó‚†™"]           # 0x219E (Leftwards two headed arrow)
#  - "‚Üü": [t: "1‚†≥‚†í‚†ó‚†ó‚†¨"]           # 0x219F (Upwards two headed arrow)
#  - "‚Ü†": [t: "1‚†≥‚†í‚†ó‚†ó‚†ï"]           # 0x21A0 (Rightwards two headed arrow)
#  - "‚Ü°": [t: "1‚†≥‚†í‚†ó‚†ó‚†©"]           # 0x21A1 (Downwards two headed arrow)
#  - "‚Ü¢": [t: "1‚†≥‚†ó‚†ó‚†™"]            # 0x21A2 (Leftwards arrow with tail)
#  - "‚Ü£": [t: "1‚†≥‚†ó‚†ó‚†ï"]            # 0x21A3 (Rightwards arrow with tail)
#  - "‚Ü§": [t: "1‚†≥‚†≥‚†ó‚†™"]            # 0x21A4 (Leftwards arrow from bar)
#  - "‚Ü•": [t: "1‚†≥‚†≥‚†ó‚†¨"]            # 0x21A5 (Upwards arrow from bar)
#  - "‚Ü¶": [t: "1‚†≥‚†≥‚†ó‚†ï"]            # 0x21A6 (Rightwards arrow from bar)
#  - "‚Üß": [t: "1‚†≥‚†≥‚†ó‚†©"]            # 0x21A7 (Downwards arrow from bar)
#  - "‚Ü≠": [t: "1‚†≥‚†∫‚†î‚†¢‚†ó‚†ï"]          # 0x21AD (Left right wave arrow)
#  - "‚ÜÆ": [t: "1‚†≥‚†∫‚†ó‚†ï‚†à‚†±"]          # 0x21AE (Left right arrow with stroke)
#  - "‚Ü∞": [t: "1‚†≥‚†¥‚†¨"]             # 0x21B0 (Upwards arrow with tip left)
#  - "‚Ü±": [t: "1‚†≥‚†≤‚†¨"]             # 0x21B1 (Upwards arrow with tip right)
#  - "‚Ü≤": [t: "1‚†≥‚†≤‚†©"]             # 0x21B2 (Downwards arrow with tip left)
#  - "‚Ü≥": [t: "1‚†≥‚†¥‚†©"]             # 0x21B3 (Downwards arrow with tip right)
#  - "‚Ü∂": [t: "1‚†≥‚†î‚†î‚†™"]            # 0x21B6 (Anticlockwise top semicircle arrow)
#  - "‚Ü∑": [t: "1‚†≥‚†¢‚†¢‚†ï"]            # 0x21B7 (Clockwise top semicircle arrow)
#  - "‚Üº": [t: "1‚†≥‚†à‚†ó‚†™"]            # 0x21BC (Leftwards harpoon with barb upwards)
#  - "‚ÜΩ": [t: "1‚†≥‚††‚†ó‚†™"]            # 0x21BD (Leftwards harpoon with barb downwards)
#  - "‚Üæ": [t: "1‚†≥‚††‚†ó‚†¨"]            # 0x21BE (Upwards harpoon with barb rightwards)
#  - "‚Üø": [t: "1‚†≥‚†à‚†ó‚†¨"]            # 0x21BF (Upwards harpoon with barb leftwards)
#  - "‚áÄ": [t: "1‚†≥‚†à‚†ó‚†ï"]            # 0x21C0 (Rightwards harpoon with barb upwards)
#  - "‚áÅ": [t: "1‚†≥‚††‚†ó‚†ï"]            # 0x21C1 (Rightwards harpoon with barb downwards)
#  - "‚áÇ": [t: "1‚†≥‚†à‚†ó‚†©"]            # 0x21C2 (Downwards harpoon with barb rightwards)
#  - "‚áÉ": [t: "1‚†≥‚††‚†ó‚†©"]            # 0x21C3 (Downwards harpoon with barb leftwards)
#  - "‚áÑ": [t: "1‚†≥‚†ï‚†ª‚†≥‚†™"]           # 0x21C4 (Rightwards arrow over leftwards arrow)
#  - "‚áÖ": [t: "1‚†≥‚†¨‚†ø‚†≥‚†©"]           # 0x21C5 (Upwards arrow left of Downwards arrow)
#  - "‚áå": [t: "‚†ò‚†∏‚†∂"]              # 0x21CC (Rightwards harpoon over leftwards harpoon (equilibrium))
#  - "‚áë": [t: "1‚†≥‚†∂‚†¨"]             # 0x21D1 (Upwards double arrow)
#  - "‚áì": [t: "1‚†≥‚†∂‚†©"]             # 0x21D3 (Downwards double arrow)
#  - "‚áï": [t: "1‚†≥‚†∫‚†∂‚†ó‚†¨"]           # 0x21D5 (Up down double arrow)
#  - "‚á†": [t: "1‚†≥‚†Ç‚†™"]             # 0x21E0 (Leftwards dashed arrow)
#  - "‚á°": [t: "1‚†≥‚†Ç‚†¨"]             # 0x21E1 (Upwards dashed arrow)
#  - "‚á¢": [t: "1‚†≥‚†Ç‚†ï"]             # 0x21E2 (Rightwards dashed arrow)
#  - "‚á£": [t: "1‚†≥‚†Ç‚†©"]             # 0x21E3 (Downwards dashed arrow)
#  - "‚•Ç": [t: "‚†∏‚†∂"]               # 0x2942 (Rightwards arrow above short leftwards arrow (equilibrium, trend to the right))
#  - "‚•Ñ": [t: "‚†à‚†∏‚†∂"]              # 0x2944 (Short rightwards arrow above leftwards arrow (equilibrium, trend to the left))
#  - "‚ñ§": [t: "‚†®‚†´‚†º‚†ôt"]            # 0x25A4 (Square with horizontal fill)
#  - "‚ñ•": [t: "‚†®‚†´‚†º‚†ôt"]            # 0x25A5 (Square with vertical fill)
#  - "‚ñ¶": [t: "‚†®‚†´‚†º‚†ôt"]            # 0x25A6 (Square with orthogonal crosshatch fill)
#  - "‚ñß": [t: "‚†®‚†´‚†º‚†ôt"]            # 0x25A7 (Square with upper left to lower right fill)
#  - "‚ñ®": [t: "‚†®‚†´‚†º‚†ôt"]            # 0x25A8 (Square with upper right to lower left fill)
#  - "‚ñ©": [t: "‚†®‚†´‚†º‚†ôt"]            # 0x25A9 (Square with diagonal crosshatch fill)
#  - "‚óç": [t: "‚†®‚†´‚†øt"]             # 0x25CD (Circle with vertical fill)
#  - "‚ñ±": [t: "1‚†´‚†à‚†º‚†ôt"]           # 0x25B1 (Parallelogram)
#  - "‚ñ≤": [t: "‚†∏‚†´‚†º‚†ât"]            # 0x25B2 (Filled triangle)
#  - "‚ñ†": [t: "‚†∏‚†´‚†º‚†ôt"]            # 0x25A0 (Filled square)
#  - "‚âú": [t: "‚††‚†®‚†ô‚†ª‚†ê‚†∂"]           # 0x225C (Delta equal to)
#  - "‚âù": [t: "1‚†£‚†ô‚†ë‚†ã‚†ú‚†ª‚†ê‚†∂"]        # 0x225D (Equal to by definition)
#  - "‚äï": [t: "1‚†´‚†ø‚†™‚†ê‚†ñt"]          # 0x2295 (Circled plus)
#  - "‚äñ": [t: "1‚†´‚†ø‚†™‚†ê‚†§t"]          # 0x2296 (Circled minus)
#  - "‚äó": [t: "1‚†´‚†ø‚†™‚†ê‚†¶t"]          # 0x2297 (Circled times)
#  - "‚äõ": [t: "1‚†´‚†ø‚†™‚†ê‚†ît"]          # 0x229B (Circled asterisk operator)
#  - "‚äû": [t: "1‚†´‚†º‚†ô‚†™‚†ê‚†ñt"]         # 0x229E (Squared plus)
#  - "‚äü": [t: "1‚†´‚†º‚†ô‚†™‚†ê‚†§t"]         # 0x229F (Squared minus)
#  - "‚ä†": [t: "1‚†´‚†º‚†ô‚†™‚†ê‚†¶t"]         # 0x22A0 (Squared times)
#  - "‚ãá": [t: "1‚†å‚†Ø‚†¶"]              # 0x22C7 (Division times)
#  - "‚ä©": [t: "‚†∏‚†≥‚†ø‚†∏‚†í"]            # 0x22A9 (Forces)
 - "Àô": [t: "‚†à"]                     # 0x02D9 ( Dot Above)
 - "¬®": [t: "‚†à‚†à"]                   # 0x00A8 ( Diaeresis/Double Dot Above )
 - "‚Éõ": [t: "‚†à‚†à‚†à"]                  # 0x20db (combining triple dot)
 - "¬©": [t: "‚†£‚†®‚†â‚†ú"]                 # 0xa9 (Copyright)
 - "¬Æ": [t: "‚†£‚†®‚†ó‚†ú"]                 # 0xa9 (Registered sign)

 - "‚Ä¶": [t: "‚†Ñ‚†Ñ‚†Ñ"]                    # 0x2026 (Ellipsis)
 - "‚ãØ": [t: "‚†Ñ‚†Ñ‚†Ñ"]               # 0x22EF (mid-line Ellipsis) -- seems to be same based on Example 10.1.3


# All the quotes are the same
 - "\"": [t: "‚†¶"]
 - "'": [t: "‚†Ñ"]
 - "‚Äú": [t: "‚†¶"]             # 0x201C
 - "‚Äù": [t: "‚†¶"]             # 0x201C
 - "‚Äò": [t: "‚†¶"]
 - "‚Äô":                      # 0x2019  (2.3_3)
    - test:
        if: "self::m:mn"
        then: [t: "N‚†Ç"]     # same as '.' block separator
        else: [t: "‚†¶"]
 - "¬´": [t: "‚†¶"]
 - "¬ª": [t: "‚†¶"]

 - " ":                        # 0x20 (Space)
     - test:
        - if: "self::m:mn"
          then: [t: "N‚†Ñ"]
        - else_if: "@data-added='missing-content' or @data-empty-in-2D or @width > 1.1"
          then: [t: "‚†∞‚†§‚†Ü"]       # omission
        - else_if: "@width < 0.25"
          then: [t: ""]       # tweaking space -- ignore
          else: [t: "W"]      # space in text or wide enough space
 - "¬†":                        # 0xa0 (Non-breaking Space)
     - test:
        - if: "self::m:mn"
          then: [t: "N‚†Ñ"]
          else: [t: "W"]
 - ",":                        # 0x2c (Comma)
     - test:
        if: "self::m:mn"
        then: [t: "N‚†Ç"]
        else: [t: "W‚†Ç"]
 - ".":                        # 0x2e (Period) -- 2.3 says that if this is acting like a decimal separator, it should be brailled like "," 
     - test:
        if: "self::m:mn"
        then:
        # presunme this is likely uses "," for a decimal separator, so just do a few checks
        # 1. if there are < 3 chars after the first ".", then not a block separator
        # 2. if there is a '.' or other likely block separator after the first '.', then not decimal separator
        # likely other (complicated?) other tests that could be used
        - with:
            variables: [StringAfter: "substring-after(., '.')"]
            replace:
            - test:
                if: "string-length($StringAfter) >= 3 and string-length($StringAfter)=string-length( translate($StringAfter, $BlockSeparators, '') )"
                then: [t: "N‚†Ñ"]   # really is a block separator
                else: [t: "N‚†Ç"]   # treat as decimal separator
        else: [t: "W‚†Ñ"]
 - ":": [t: "‚†ê‚†Ç"]              # 0x003A (Colon)
 - "-": [t: "‚†§"]              # 0x2d (Minus sign or hyphen)
 - "‚Å°": [t: ""]                # 0x2061‚Å° (invisible function apply)
 - "‚Å¢": [t: ""]                # 0x2062 (invisible times)
 - "‚Å£": [t: ""]                 # 0x2063‚Å° (invisible separator)
 - "‚Å§": [t: ""]                 # 0x2064 (invisible plus)

 - "`": [t: "‚†¢"]                # 0x0060 (GRAVE ACCEN)
 
 - "◊ê": [t: "‚††‚†≥"]                # 0x05D0 (aleph)
 - "‚óã": [t: "‚†™‚†ï"]                # 0x25CB (c√≠rculo)
 - "‚àû": [t: "‚†º‚†≥"]                # 0x221E (infinito)
 - "‚éî": [t: "‚†Ø‚†ï"]                # 0x2394 (pol√≠gono)
 - "‚Ä∞": [t: "‚†∏‚†¥‚†¥"]                # 0x2030 (tanto por mil)
 - "¬¨": [t: "‚††‚†Ñ"]                # 0x00AC (negaci√≥n l√≥gica)
 - "‚Üï": [t: "‚†∏‚†Ö"]                # 0x2195 (flecha arriba-abajo)
 - "‚Üñ": [t: "‚†ê‚†°"]                # 0x2196 (flecha oblicua arriba-izquierda)
 - "‚Üô": [t: "‚†ê‚†å"]                # 0x2199 (flecha abajo-izquierda)
 - "‚Üì": [t: "‚†∏‚†Ñ"]                # 0x2193 (flecha hacia abajo)
 - "‚Üò": [t: "‚†°‚†Ç"]                # 0x2198 (flecha oblicua abajo-derecha)
 - "‚Üó": [t: "‚†å‚†Ç"]                # 0x2197 (flecha arriba-derecha)
 - "‚Üë": [t: "‚†∏‚†Å"]                # 0x2191 (flecha hacia arriba)
 - "‚ñ≥": [t: "‚††‚†æ"]               # 0x25B3 (Triangle)
 - "‚ñ≠": [t: "‚†Ø‚†Ω"]                # 0x25AD (rect√°ngulo)
 - "‚ñ°": [t: "‚†∏‚†Ω"]                # 0x25A1 (cuadrado)
 - "‚ü∫": [t: "‚†™‚†í‚†ï"]                # 0x27FA (doble implicaci√≥n ¬´si y solo si¬ª)
 - "‚ü∏": [t: "‚†™‚†í"]                # 0x27F8 (implicaci√≥n rec√≠proca; porque)
 - "‚üπ": [t: "‚†í‚†ï"]                # 0x27F9 (implicaci√≥n directa; implica)
 - "‚áî": [t: "‚†™‚†í‚†ï"]                # 0x21D4 (LEFT RIGHT DOUBLE ARROW)
 - "‚áê": [t: "‚†™‚†í"]                # 0x21D0 (LEFTWARDS DOUBLE ARROW)
 - "‚áí": [t: "‚†í‚†ï"]                # 0x21D2 (RIGHTWARDS DOUBLE ARROW)
 - "‚§°": [t: "‚†ê‚†°‚†Ç"]                # 0x2921 (flecha abajo-derecha y arriba izquierda)
 - "‚§¢": [t: "‚†ê‚†å‚†Ç"]                # 0x2922 (flecha abajo-izquierda y arriba derecha)
 - "‚åã": [t: "‚††‚†æ"]                # 0x230B (cerrar suelo)
 - "‚åä": [t: "‚†∑‚†Ñ"]                # 0x230A (abrir suelo)
 - "‚åâ": [t: "‚†ê‚†æ"]                # 0x2309 (cerrar techo)
 - "‚åà": [t: "‚†∑‚†Ç"]                # 0x2308 (abrir techo)
 - "‚ã©": [t: "‚†ï‚†Ç"]                # 0x22E9 (posterior a MULTI)
 - "‚ã®": [t: "‚†ê‚†™"]                # 0x22E8 (anterior a MULTI)
 - "‚ãü": [t: "‚†ï‚†Ç‚†∂"]                # 0x22DF (posterior o igual a)
 - "‚ãû": [t: "‚†ê‚†™‚†∂"]                # 0x22DE (anterior o igual a)
 - "‚ãù": [t: "‚†ï‚†∂"]                # 0x22DD (mayor o igual que MULTI)
 - "‚ãú": [t: "‚†™‚†∂"]                # 0x22DC (menor o igual que  MULTI)
 - "‚ãè": [t: "‚†∏‚†£"]                # 0x22CF (proposici√≥n falsa)
 - "‚ãé": [t: "‚†∏‚†é"]                # 0x22CE (proposici√≥n verdadera)
 - "‚®Ç": [t: "‚†™‚†¶"]                # 0x2A02 (producto tensorial)
 - "‚®Å": [t: "‚†™‚†ñ"]                # 0x2A01 (suma directa)
 - "‚ãÉ":                           # 0x22C3 (uni√≥n de una familia de conjuntos)
    - t: "‚†ø‚†ú"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚ãÇ":                          # 0x22C2 (intersecci√≥n de una familia de conjuntos)
    - t: "‚†ø‚†±"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚ãÅ":                          # 0x22C1 (disyunci√≥n de una familia de proposiciones)
    - t: "‚†ø‚†ä"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚ãÄ":                          # 0x22C0 (conjunci√≥n de una familia de proposiciones)
    - t: "‚†ø‚†¢"
    - test:
        if: "not(IsNode(.., 'modified'))"
        then: [t: "‚†±"]
 - "‚äø": [t: "‚†∏‚†¶"]                # 0x22BF (tri√°ngulo rect√°ngulo)
 - "‚ä©": [t: "‚†∏‚†∂"]                # 0x22A9 (tautolog√≠a)
 - "‚äÆ": [t: "‚†ò‚†∏‚†∂"]                # 0x22AE (no tautolog√≠a)
 - "‚äá": [t: "‚†∞‚†ú"]                # 0x2287 (incluye o es igual a)
 - "‚äâ": [t: "‚†ò‚†∞‚†ú"]                # 0x2289 (no incluye ni es igual a)
 - "‚äÜ": [t: "‚†£‚†Ü"]                # 0x2286 (incluido o es igual a)
 - "‚äà": [t: "‚†ò‚†£‚†Ü"]                # 0x2288 (no incluido ni es igual a)
 - "‚äÉ": [t: "‚††‚†ú"]                # 0x2283 (Incluye; tiene como subconjunto)
 - "‚äÖ": [t: "‚†ò‚††‚†ú"]                # 0x2285 (no incluye a)
 - "‚äÇ": [t: "‚†£‚†Ñ"]                # 0x2282 (Incluido; subconjunto)
 - "‚äÑ": [t: "‚†ò‚†£‚†Ñ"]                # 0x2284 (no incluido en)
 - "‚ã°": [t: "‚†ò‚†ï‚†Ç‚†∂"]                # 0x22E1 (no es posterior ni igual a)
 - "‚âΩ": [t: "‚†ï‚†Ç‚†∂"]                # 0x227D (sigue o igual a)
 - "‚ã†": [t: "‚†ò‚†ê‚†™‚†∂"]                # 0x22E0 (no es anterior ni igual a)
 - "‚âº": [t: "‚†ê‚†™‚†∂"]                # 0x227C (precede o igual a)
 - "‚âπ": [t: "‚†ò‚†ï‚†™"]                # 0x2279 (ni mayor ni menor que)
 - "‚â∏": [t: "‚†ò‚†ï‚†™"]                # 0x2278 (ni mayor ni menor que)
 - "‚âß": [t: "‚†ï‚†∂"]                # 0x2267 (mayor o igual que MULTI)
 - "‚â¶": [t: "‚†™‚†∂"]                # 0x2266 (menor o igual que  MULTI)
 - "‚â±": [t: "‚†ò‚†ï‚†∂"]                # 0x2271 (no es mayor ni igual que)
 - "‚â•": [t: "‚†ï‚†∂"]                # 0x2265 (mayor o igual que MULTI)
 - "‚â§": [t: "‚†™‚†∂"]                # 0x2264 (menor o igual que  MULTI)
 - "‚â∞": [t: "‚†ò‚†™‚†∂"]                # 0x2270 (no es menor ni igual que)
 - "‚©Ω": [t: "‚†™‚†∂"]                # 0x227D
 - "‚©æ": [t: "‚†ï‚†∂"]                # 0x2A7E (greater-than-or-slanted-equals)
 # FIX: ‚âà" p99 has "‚†ê‚†∂"
 - "‚âà": [t: "‚†ê‚†∂‚†Ñ"]                # 0x2248 (casi igual a; asint√≥ticamente igual a)
 - "‚âÑ": [t: "‚†ò‚†ê‚†∂‚†Ñ"]                # 0x2244 (no es asint√≥ticamente igual a)
 - "‚âÅ": [t: "‚†ò‚†ê‚†¢‚†Ñ"]                # 0x2241 (tilde sube-baja tachada)
 - "‚à∫": [t: "‚†®‚†í‚†Ö"]                # 0x223A (progresi√≥n geom√©trica)
 - "‚à∑": [t: "‚†∞‚†Ü"]                # 0x2237 (proporci√≥n; igualdad de razones)
 - "‚à∂": [t: "‚†ê‚†Ç"]                # 0x2236 (ratio)
 - "‚àµ": [t: "‚†Ä‚†à‚†å‚†Ä"]                # 0x2235 (puesto que)
 - "‚à¥": [t: "‚†Ä‚††‚†°‚†Ä"]                # 0x2234 (por lo tanto)
 - "‚à™": [t: "‚†∏‚†ú"]                # 0x222A (uni√≥n)
 - "‚©ä": [t: "‚†¢‚†î"]                # 0x2A4A (curva geom√©trica)
 - "‚à©": [t: "‚†∏‚†±"]                # 0x2229 (intersecci√≥n)
 - "‚äª": [t: "‚†∏‚†Æ"]                # 0x2228 (disyunci√≥n excluyente)
 - "‚à®": [t: "‚†∏‚†ä"]                # 0x2228 (disyunci√≥n (o))
 - "‚àß": [t: "‚†∏‚†¢"]                # 0x2227 (conjunci√≥n (y))
 - "‚à§": [t: "‚†ò‚†∏‚†Ä"]                # 0x2224 (no es divisor de)
 - "‚àù": [t: "‚†∏‚†≤"]                # 0x221D (proporcional a)
 - "‚àñ": [t: "‚†ê‚†Ñ"]                # 0x2216 (diferencia de conjuntos)
 - "‚àå": [t: "‚†ò‚†ê‚†ú"]                # 0x220C (no comprende; no tiene como elemento)
 - "‚àã": [t: "‚†ê‚†ú"]                # 0x220B (comprende; tiene como elemento)
 - "‚àà": [t: "‚†£‚†Ç"]                # 0x2208 (es elemento de; pertenece a)
 - "‚àâ": [t: "‚†ò‚†£‚†Ç"]                # 0x2209 (no es un elemento de; no pertenece a)
 - "‚àÖ": [t: "‚†∏‚†ö"]                # 0x2205 (conjunto vac√≠o)
 - "‚àÉ": [t: "‚†®‚†¢"]                # 0x2203 (cuantificador existencial: existe por lo menos un elemento)
 - "‚àÑ": [t: "‚†ò‚†®‚†¢"]                # 0x2204 (no existe)
 - "‚àÄ": [t: "‚†®‚†Ñ"]                # 0x2200 (cuantificador universal: para todo)
 - "«Å": [t: "‚†∏‚†á"]                # 0x01C1 (doble barra)
 - "√∑": [t: "‚†≤"]                # 0x00F7 (dividido por)
 - "√ó":                          # 0x00D7 (multiplicar (aspas))
    # FIX: this is a hacky attempt to figure out whether this is vector multiplication or regular multiplication
    # Look for an arrow above or a bold on each side
    - test:
        if:
        - "preceding-sibling::*[1][@math-variant='bold' or self::m:mover[*[2][.='‚Üí' or .='‚ü∂' or .='‚áÄ']]] and"
        - "following-sibling::*[1][@math-variant='bold' or self::m:mover[*[2][.='‚Üí' or .='‚ü∂' or .='‚áÄ']]]"
        then: [t: "‚†à‚†¶"]
        else: [t: "‚†¶"]
 - "‚â´": [t: "‚†ï‚†ï"]                # 0x226B (mucho mayor que)
 - "‚â™": [t: "‚†™‚†™"]                # 0x226A (mucho menor que)
 - "¬±": [t: "‚†ñ‚†í‚†§"]                # 0x00B1 (m√°s o menos)
 - "‚äÅ": [t: "‚†ò‚†ï‚†Ç"]                # 0x2281 (no es posterior a)
 - "‚âª": [t: "‚†ï‚†Ç"]                # 0x227B (sigue a; posterior a)
 - "‚âØ": [t: "‚†ò‚†ï"]                # 0x226F (no mayor que)
 - "=": [t: "‚†∂"]                # 0x003D (igual a)
 - "‚â†": [t: "‚†ò‚†∂"]                # 0x2260 (distinto de)
 - "‚äÄ": [t: "‚†ò‚†ê‚†™"]                # 0x2280 (no es anterior a)
 - "‚™º": [t: "‚†ï‚†ï‚†Ç"]                # 0x2ABC (muy posterior a)
 - "‚™ª": [t: "‚†ê‚†™‚†™"]                # 0x2ABB (muy anterior a)
 - "‚â∫": [t: "‚†ê‚†™"]                # 0x227A (precede a; anterior a)
 - "‚âÆ": [t: "‚†ò‚†™"]                # 0x226E (no menor que)
 - "‚àì": [t: "‚†§‚†í‚†ñ"]                # 0x2213 (menos o m√°s)
 - "‚àï": [t: "‚††‚†Ç"]                # 0x2215 (conjunto cociente)
 - "„Äõ": [t: "‚†æ‚†Ç"]                # 0x301B (cerrar corchetes de clase)
 - "„Äö": [t: "‚†ê‚†∑"]                # 0x301A (abrir corchetes de clase)
 - "‚Ç°": [t: "‚†∏‚†â"]                # 0x20A1 (col√≥n)
 - "‚Ç¨": [t: "‚†∏‚†ë"]                # 0x20AC (euro)
 - "¬•": [t: "‚†∏‚†Ω"]                # 0x00A5 (yen)
 - "¬£": [t: "‚†ê‚†Æ"]                # 0x00A3 (libra)
 - "¬¢": [t: "‚†ò‚†â"]                # 0x00A2 (centavo)
 - "‚å™": [t: "‚†®‚†Ç"]                # 0x232A (cerrar par√©ntesis angulares)
 - "‚å©": [t: "‚†ê‚†Ö"]                # 0x2329 (abrir par√©ntesis angulares)
 - "‚ü®": [t: "‚†ê‚†Ö"]                # 0x27E8 (Mathematical left angle bracket)
 - "‚ü©": [t: "‚†®‚†Ç"]                # 0x27E9 (Mathematical right angle bracket)
 - "}": [t: "‚†∏‚†Ç"]                # 0x007D (cerrar llaves)
 - "|": [t: "‚†∏ùòÑ"]                # 0x007C (barra vertical)
 - "{": [t: "‚†ê‚†á"]                # 0x007B (abrir llaves)
 - "\\": [t: "‚†ê‚†Ñ"]               # 0x005C (barra inversa)
 - ";": [t: "‚†Ä‚†Ü"]                # 0x003B (punto y coma de separaci√≥n)
 - "/": [t: "‚†≤"]                # 0x002F (barra oblicua)
 - "%": [t: "‚†∏‚†¥"]                # 0x0025 (tanto por ciento)
 - "$":
    - test:
        if: "following-sibling::*[self::m:mn]"
        then: [t: "‚†∏‚†è"]                # 0x0024 (peso)
        else: [t: "‚†∏‚†é"]                # 0x0024 (d√≥lar)
 - "#": [t: "‚†º‚†Ö"]                # 0x0023 (cardinal de un conjunto)
 - "‚Çø": [t: "‚†∏‚†É"]                # 0x20BF (bitcoin)
 - "‚üß": [t: "‚†æ‚†Ç"]                # 0x27E7 (cerrar corchete de clase)
 - "‚ü¶": [t: "‚†ê‚†∑"]                # 0x27E6 (abrir corchete de clase)
 - "‚àá": [t: "‚†à‚†ª"]                # 0x2207 (Nabla (del, inverted capital delta))

 - "‚âê": [t: "‚†à‚†∂"]                # 0x2250 (aproximadamente igual a)
 - "‚âü": [t: "‚†∂‚†¢‚†Ä"]                # 0x225F (cuestionado que sea igual a)
 - "‚âî": [t: "‚†∞‚†∂"]                # 0x2254 (igual por definici√≥n)
 - "‚âô": [t: "‚†∞‚†í‚†∂"]                # 0x2259 (corresponde a)
 - "‚â°": [t: "‚†∂‚†∂"]                # 0x2261 (id√©ntico a; congruente con)

 - "‚à•": [t: "‚†∏‚†á"]                # 0x2225 (es paralela a)
 - "‚à¶": [t: "‚†ò‚†∏‚†á"]                # 0x2226 (no paralela)
 - "‚âÖ": [t: "‚†ê‚†¢‚†∂"]                # 0x2245 (congruente con)
 - "‚ä•": [t: "‚†º‚†Ñ"]                # 0x22A5 (perpendicular a/ortogonal a) [symbol used in spec]
 - "‚üÇ": [t: "‚†º‚†§"]               # 0x27C2 (Perpendicular)

 - "‚äô": [t: "‚†∞‚†Ñ"]                # 0x2299 (operador gen√©rico (suele utilizarse para representar una operaci√≥n entre elementos de un conjunto)
 - "‚äö": [t: "‚†∞‚†Ñ"]                # 0x229A (operador gen√©rico (suele utilizarse para representar una operaci√≥n entre elementos de un conjunto)
 - "‚ãÜ": [t: "‚†∞‚†Ñ"]                # 0x22C6 (operador gen√©rico (suele utilizarse para representar una operaci√≥n entre elementos de un conjunto)
 - "‚Ä†": [t: "‚†∞‚†Ñ"]                # 0x2020 (operador gen√©rico (suele utilizarse para representar una operaci√≥n entre elementos de un conjunto)
 - "‚àó": [t: "‚†∞‚†Ñ"]                # 0x2217 (operador gen√©rico (suele utilizarse para representar una operaci√≥n entre elementos de un conjunto)
